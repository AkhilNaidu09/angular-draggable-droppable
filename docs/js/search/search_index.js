var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.309,1,0.941]],["body/interfaces/Coordinates.html",[0,0.422,1,1.358,2,0.471,3,0.401,4,0.338,5,0.549,6,0.281,7,0.994,8,1.953,9,1.953,10,1.54,11,0.766,12,0.061,13,0.729,14,0.437,15,0.855,16,0.855,17,1.157,18,1.099,19,1.283,20,1.65,21,0.855,22,1.157,23,0.855,24,1.157,25,0.338,26,1.291,27,1.049,28,0.994,29,0.471,30,0.549,31,0.549,32,0.744,33,0.744,34,0.744,35,0.549,36,0.744,37,0.855,38,0.549,39,0.899,40,0.526,41,0.471,42,1.58,43,1.221,44,1.418,45,0.855,46,1.049,47,1.492,48,1.32,49,1.32,50,1.192,51,1.84,52,1.92,53,1.418,54,0.994,55,1.049,56,0.624,57,0.549,58,0.639,59,0.549,60,0.549,61,0.549,62,0.744,63,0.639,64,0.744,65,0.401,66,0.732,67,0.994,68,1.157,69,1.291,70,1.184,71,0.639,72,1.124,73,0.639,74,0.639,75,1.157,76,0.639,77,0.639,78,0.639,79,0.744,80,0.639,81,0.744,82,0.994,83,0.471,84,0.744,85,1.099,86,1.157,87,0.994,88,0.639,89,0.639,90,0.744,91,0.639,92,1.257,93,0.281,94,0.639,95,0.639,96,0.639,97,0.639,98,1.603,99,0.744,100,1.421,101,0.744,102,1.65,103,0.744,104,1.157,105,1.729,106,0.994,107,0.994,108,1.157,109,1.157,110,1.157,111,1.157,112,1.157,113,1.157,114,0.549,115,0.744,116,0.744,117,0.471,118,0.549,119,1.157,120,0.744,121,1.157,122,0.744,123,1.157,124,1.358,125,0.744,126,1.421,127,1.184,128,0.744,129,1.92,130,0.744,131,0.744,132,0.744,133,1.215,134,1.157,135,0.744,136,1.157,137,0.744,138,1.157,139,1.421,140,1.157,141,0.744,142,1.421,143,1.157,144,0.744,145,1.157,146,1.157,147,1.157,148,1.157,149,0.744,150,1.157,151,0.744,152,0.744,153,0.744,154,1.157,155,0.744,156,0.744,157,0.744,158,0.744,159,0.744,160,1.421,161,1.421,162,1.92,163,0.744,164,1.221,165,0.744,166,0.744,167,1.421,168,0.744,169,0.744,170,0.744,171,0.744,172,0.744,173,0.744,174,0.549,175,0.744,176,0.744,177,0.744,178,0.744,179,0.744,180,0.744,181,0.744,182,0.744,183,0.549,184,1.157,185,0.744,186,0.744,187,0.744,188,0.744,189,1.603,190,1.421,191,0.744,192,0.744,193,0.744,194,2.04,195,0.744,196,0.744,197,1.099,198,0.744,199,0.744,200,0.744,201,0.744,202,1.157,203,0.744,204,0.744,205,0.744,206,0.744,207,0.744,208,0.744,209,1.737,210,1.157,211,1.157,212,0.744,213,0.744,214,1.157,215,1.157,216,1.157,217,0.744,218,1.421,219,1.157,220,0.744,221,1.737,222,1.157,223,0.744,224,0.744,225,0.744,226,0.744,227,0.744,228,0.744,229,0.744,230,0.744,231,0.744,232,0.744,233,0.744,234,1.157,235,1.737,236,0.744,237,0.744,238,0.744,239,0.744,240,0.744,241,0.744,242,0.744,243,0.744,244,0.744,245,1.157,246,0.028,247,0.028]],["title/modules/DragAndDropModule.html",[248,1.095,249,1.275]],["body/modules/DragAndDropModule.html",[2,1.132,3,0.964,4,0.813,12,0.06,13,1.064,25,0.813,39,1.343,40,0.813,41,1.132,42,1.944,59,1.321,60,1.764,133,1.132,246,0.05,247,0.05,248,1.536,249,2.263,250,3.748,251,3.748,252,3.533,253,3.3,254,3.767,255,4.447,256,3.748,257,3.748,258,3.748,259,2.978,260,2.978]],["title/interfaces/DragAxis.html",[0,0.309,43,1.095]],["body/interfaces/DragAxis.html",[0,0.422,1,1.283,2,0.471,3,0.401,4,0.338,5,0.549,6,0.281,7,0.994,8,1.953,9,1.953,10,1.358,11,0.766,12,0.061,13,0.729,14,0.437,15,0.855,16,0.855,17,1.157,18,1.099,19,1.283,20,1.65,21,0.855,22,1.157,23,0.855,24,1.157,25,0.338,26,1.291,27,1.049,28,0.994,29,0.471,30,0.549,31,0.549,32,0.744,33,0.744,34,0.744,35,0.549,36,0.744,37,0.855,38,0.549,39,0.899,40,0.526,41,0.471,42,1.58,43,1.377,44,1.569,45,0.855,46,1.049,47,1.492,48,1.32,49,1.32,50,1.192,51,1.84,52,1.92,53,1.418,54,0.994,55,1.049,56,0.624,57,0.549,58,0.639,59,0.549,60,0.549,61,0.549,62,0.744,63,0.639,64,0.744,65,0.401,66,0.732,67,0.994,68,1.157,69,1.291,70,1.184,71,0.639,72,1.124,73,0.639,74,0.639,75,1.157,76,0.639,77,0.639,78,0.639,79,0.744,80,0.639,81,0.744,82,0.994,83,0.471,84,0.744,85,1.099,86,1.157,87,0.994,88,0.639,89,0.639,90,0.744,91,0.639,92,1.257,93,0.281,94,0.639,95,0.639,96,0.639,97,0.639,98,1.603,99,0.744,100,1.421,101,0.744,102,1.65,103,0.744,104,1.157,105,1.729,106,0.994,107,0.994,108,1.157,109,1.157,110,1.157,111,1.157,112,1.157,113,1.157,114,0.549,115,0.744,116,0.744,117,0.471,118,0.549,119,1.157,120,0.744,121,1.157,122,0.744,123,1.157,124,1.358,125,0.744,126,1.421,127,1.184,128,0.744,129,1.92,130,0.744,131,0.744,132,0.744,133,1.215,134,1.157,135,0.744,136,1.157,137,0.744,138,1.157,139,1.421,140,1.157,141,0.744,142,1.421,143,1.157,144,0.744,145,1.157,146,1.157,147,1.157,148,1.157,149,0.744,150,1.157,151,0.744,152,0.744,153,0.744,154,1.157,155,0.744,156,0.744,157,0.744,158,0.744,159,0.744,160,1.421,161,1.421,162,1.92,163,0.744,164,1.221,165,0.744,166,0.744,167,1.421,168,0.744,169,0.744,170,0.744,171,0.744,172,0.744,173,0.744,174,0.549,175,0.744,176,0.744,177,0.744,178,0.744,179,0.744,180,0.744,181,0.744,182,0.744,183,0.549,184,1.157,185,0.744,186,0.744,187,0.744,188,0.744,189,1.603,190,1.421,191,0.744,192,0.744,193,0.744,194,2.04,195,0.744,196,0.744,197,1.099,198,0.744,199,0.744,200,0.744,201,0.744,202,1.157,203,0.744,204,0.744,205,0.744,206,0.744,207,0.744,208,0.744,209,1.737,210,1.157,211,1.157,212,0.744,213,0.744,214,1.157,215,1.157,216,1.157,217,0.744,218,1.421,219,1.157,220,0.744,221,1.737,222,1.157,223,0.744,224,0.744,225,0.744,226,0.744,227,0.744,228,0.744,229,0.744,230,0.744,231,0.744,232,0.744,233,0.744,234,1.157,235,1.737,236,0.744,237,0.744,238,0.744,239,0.744,240,0.744,241,0.744,242,0.744,243,0.744,244,0.744,245,1.157,246,0.028,247,0.028]],["title/directives/DraggableDirective.html",[14,0.482,60,0.941]],["body/directives/DraggableDirective.html",[0,0.371,1,1.231,2,0.432,3,0.368,4,0.31,5,0.504,6,0.258,8,1.905,9,1.905,10,1.31,11,1.097,12,0.061,13,0.695,14,0.508,15,0.992,16,0.799,17,1.082,18,1.176,19,1.466,20,1.706,21,0.992,22,1.344,23,0.799,24,1.082,25,0.31,26,1.257,27,0.992,28,0.929,29,0.432,30,0.504,31,0.504,32,0.682,33,0.682,34,0.682,35,0.504,36,0.682,37,0.799,38,0.504,39,0.851,40,0.611,41,0.432,42,1.524,43,1.524,44,1.424,45,0.992,46,1.31,47,1.432,48,1.287,49,1.287,50,1.232,51,1.774,52,1.859,53,1.373,54,1.155,55,0.992,56,0.724,57,0.799,58,0.929,59,0.504,60,0.799,61,0.799,62,1.082,63,0.929,64,1.082,65,0.583,66,0.968,67,1.314,68,1.529,69,1.416,70,1.373,71,0.929,72,1.239,73,0.929,74,1.155,75,1.529,76,0.929,77,1.155,78,0.929,79,1.082,80,0.929,81,1.082,82,1.155,83,0.685,84,1.344,85,1.287,86,1.529,87,1.314,88,0.929,89,0.929,90,1.082,91,1.155,92,1.22,93,0.409,94,0.929,95,1.155,96,0.929,97,1.155,98,1.529,99,0.682,100,1.344,101,0.682,102,1.621,103,0.682,104,1.082,105,1.707,106,0.929,107,0.929,108,1.082,109,1.082,110,1.082,111,1.082,112,1.082,113,1.082,114,0.504,115,0.682,116,0.682,117,0.432,118,0.504,119,1.082,120,0.682,121,1.082,122,0.682,123,1.082,124,1.31,125,0.682,126,1.344,127,1.129,128,0.682,129,1.859,130,0.682,131,0.682,132,0.682,133,1.176,134,1.082,135,0.682,136,1.082,137,0.682,138,1.082,139,1.344,140,1.082,141,0.682,142,1.344,143,1.082,144,0.682,145,1.082,146,1.082,147,1.082,148,1.082,149,0.682,150,1.082,151,0.682,152,0.682,153,0.682,154,1.082,155,0.682,156,0.682,157,0.682,158,0.682,159,0.682,160,1.344,161,1.344,162,1.859,163,0.682,164,1.597,165,0.682,166,0.682,167,1.344,168,0.682,169,0.682,170,0.682,171,0.682,172,0.682,173,0.682,174,0.504,175,0.682,176,0.682,177,0.682,178,0.682,179,0.682,180,0.682,181,0.682,182,0.682,183,0.504,184,1.082,185,0.682,186,0.682,187,0.682,188,0.682,189,1.529,190,1.344,191,0.682,192,0.682,193,0.682,194,1.986,195,0.682,196,0.682,197,1.055,198,0.682,199,0.682,200,0.682,201,0.682,202,1.082,203,0.682,204,0.682,205,0.682,206,0.682,207,0.682,208,0.682,209,1.667,210,1.082,211,1.082,212,0.682,213,0.682,214,1.082,215,1.082,216,1.082,217,0.682,218,1.344,219,1.082,220,0.682,221,1.667,222,1.082,223,0.682,224,0.682,225,0.682,226,0.682,227,0.682,228,0.682,229,0.682,230,0.682,231,0.682,232,0.682,233,0.682,234,1.082,235,1.667,236,0.682,237,0.682,238,0.682,239,0.682,240,0.682,241,0.682,242,0.682,243,0.682,244,0.682,245,1.082,246,0.026,247,0.026,261,1.136,262,2.112,263,3.387,264,1.43,265,1.43,266,1.43,267,1.43,268,1.43,269,1.43,270,1.43,271,1.43,272,1.43,273,1.43]],["title/interfaces/DropData.html",[0,0.309,66,0.807]],["body/interfaces/DropData.html",[0,0.427,2,0.839,3,0.715,4,0.603,6,0.501,7,1.51,10,1.551,11,0.715,12,0.061,13,0.955,14,0.501,15,0.979,16,1.298,18,1.329,19,1.551,21,0.979,23,1.298,25,0.603,26,1.112,29,1.112,30,1.298,31,0.979,35,0.979,37,0.979,38,0.979,39,1.248,40,0.955,41,0.839,44,1.298,48,1.421,49,1.383,53,1.456,56,0.715,65,0.948,66,1.517,69,1.45,70,0.979,72,0.715,85,1.248,92,1.248,102,1.456,105,1.298,114,0.979,117,0.839,118,0.979,124,0.979,127,1.551,133,1.112,174,1.298,183,0.979,246,0.042,247,0.042,274,1.831,275,2.927,276,2.207,277,1.326,278,2.428,279,1.831,280,2.927,281,2.207,282,2.207,283,2.207,284,2.927,285,2.207,286,2.207,287,2.207,288,2.207,289,2.207,290,2.207,291,2.207,292,2.927,293,2.207,294,3.74,295,2.207,296,3.284,297,2.207,298,3.497,299,2.207,300,1.831,301,2.207,302,2.207,303,2.207,304,2.207,305,2.207,306,3.284,307,2.207,308,2.207,309,2.207,310,2.207,311,2.207,312,2.207,313,2.207,314,2.207,315,2.207,316,2.207,317,2.207,318,1.831,319,2.207,320,2.207]],["title/directives/DroppableDirective.html",[14,0.482,253,1.761]],["body/directives/DroppableDirective.html",[0,0.292,2,0.762,3,0.649,4,0.547,6,0.455,7,1.415,10,1.491,11,1.177,12,0.061,13,0.918,14,0.622,15,1.216,16,1.491,18,1.382,19,1.681,21,1.216,23,1.491,25,0.547,26,1.042,29,1.042,30,1.216,31,0.889,35,0.889,37,0.889,38,0.889,39,1.415,40,1.035,41,0.762,44,1.216,48,1.382,49,1.338,50,1.088,53,1.387,56,0.888,57,0.889,61,0.889,65,1.14,66,1.415,69,1.538,70,0.889,72,0.649,85,1.415,92,1.188,93,0.455,102,1.387,105,1.216,114,1.216,117,1.188,118,0.889,124,0.889,127,1.491,133,1.042,174,1.216,183,0.889,246,0.039,247,0.039,253,1.662,261,2.004,263,3.636,274,1.662,275,3.362,276,2.004,277,1.204,278,2.275,279,1.662,280,2.743,281,2.004,282,2.004,283,2.743,284,3.362,285,3.127,286,2.743,287,3.127,288,3.362,289,2.004,290,2.004,291,2.004,292,2.743,293,2.004,294,3.636,295,2.004,296,3.127,297,2.004,298,3.362,299,2.004,300,1.662,301,2.004,302,2.004,303,2.004,304,2.004,305,2.004,306,3.127,307,2.004,308,2.004,309,2.004,310,2.004,311,2.004,312,2.004,313,2.004,314,2.004,315,2.004,316,2.004,317,2.004,318,1.662,319,2.004,320,2.004,321,2.004,322,3.452,323,2.523,324,3.452,325,2.004,326,2.004,327,1.407,328,2.523,329,2.523,330,2.523,331,2.523]],["title/interfaces/PointerEvent.html",[0,0.309,47,1.095]],["body/interfaces/PointerEvent.html",[0,0.42,1,1.278,2,0.467,3,0.398,4,0.336,5,0.545,6,0.279,7,0.989,8,1.897,9,1.897,10,1.537,11,0.861,12,0.061,13,0.726,14,0.435,15,0.85,16,0.85,17,1.151,18,1.096,19,1.278,20,1.645,21,0.85,22,1.151,23,0.85,24,1.151,25,0.336,26,1.288,27,1.044,28,0.989,29,0.467,30,0.545,31,0.545,32,0.738,33,0.738,34,0.738,35,0.545,36,0.738,37,0.85,38,0.545,39,0.895,40,0.523,41,0.467,42,1.576,43,1.215,44,1.414,45,0.85,46,1.044,47,1.576,48,1.381,49,1.381,50,1.224,51,1.981,52,2.035,53,1.414,54,0.989,55,1.044,56,0.62,57,0.545,58,0.634,59,0.545,60,0.545,61,0.545,62,0.738,63,0.634,64,0.738,65,0.398,66,0.728,67,0.989,68,1.151,69,1.288,70,1.179,71,0.634,72,1.122,73,0.634,74,0.634,75,1.151,76,0.634,77,0.634,78,0.634,79,0.738,80,0.634,81,0.738,82,0.989,83,0.467,84,0.738,85,1.096,86,1.151,87,0.989,88,0.634,89,0.634,90,0.738,91,0.634,92,1.254,93,0.279,94,0.634,95,0.634,96,0.634,97,0.634,98,1.597,99,0.738,100,1.414,101,0.738,102,1.648,103,0.738,104,1.151,105,1.727,106,0.989,107,0.989,108,1.151,109,1.151,110,1.151,111,1.151,112,1.151,113,1.151,114,0.545,115,0.738,116,0.738,117,0.467,118,0.545,119,1.151,120,0.738,121,1.151,122,0.738,123,1.151,124,1.354,125,0.738,126,1.414,127,1.179,128,0.738,129,1.915,130,0.738,131,0.738,132,0.738,133,1.212,134,1.151,135,0.738,136,1.151,137,0.738,138,1.151,139,1.414,140,1.151,141,0.738,142,1.414,143,1.151,144,0.738,145,1.151,146,1.151,147,1.151,148,1.151,149,0.738,150,1.151,151,0.738,152,0.738,153,0.738,154,1.151,155,0.738,156,0.738,157,0.738,158,0.738,159,0.738,160,1.414,161,1.414,162,1.915,163,0.738,164,1.215,165,0.738,166,0.738,167,1.414,168,0.738,169,0.738,170,0.738,171,0.738,172,0.738,173,0.738,174,0.545,175,0.738,176,0.738,177,0.738,178,0.738,179,0.738,180,0.738,181,0.738,182,0.738,183,0.545,184,1.151,185,0.738,186,0.738,187,0.738,188,0.738,189,1.597,190,1.414,191,0.738,192,0.738,193,0.738,194,2.035,195,0.738,196,0.738,197,1.096,198,0.738,199,0.738,200,0.738,201,0.738,202,1.151,203,0.738,204,0.738,205,0.738,206,0.738,207,0.738,208,0.738,209,1.731,210,1.151,211,1.151,212,0.738,213,0.738,214,1.151,215,1.151,216,1.151,217,0.738,218,1.414,219,1.151,220,0.738,221,1.731,222,1.151,223,0.738,224,0.738,225,0.738,226,0.738,227,0.738,228,0.738,229,0.738,230,0.738,231,0.738,232,0.738,233,0.738,234,1.151,235,1.731,236,0.738,237,0.738,238,0.738,239,0.738,240,0.738,241,0.738,242,0.738,243,0.738,244,0.738,245,1.151,246,0.027,247,0.027]],["title/interfaces/SnapGrid.html",[0,0.309,45,0.941]],["body/interfaces/SnapGrid.html",[0,0.421,1,1.281,2,0.469,3,0.4,4,0.337,5,0.548,6,0.28,7,0.992,8,1.952,9,1.952,10,1.539,11,0.765,12,0.061,13,0.728,14,0.436,15,0.853,16,0.853,17,1.155,18,1.098,19,1.281,20,1.648,21,0.853,22,1.155,23,0.853,24,1.155,25,0.337,26,1.29,27,1.047,28,0.992,29,0.469,30,0.548,31,0.548,32,0.742,33,0.742,34,0.742,35,0.548,36,0.742,37,0.853,38,0.548,39,0.898,40,0.525,41,0.469,42,1.579,43,1.219,44,1.417,45,1.047,46,1.047,47,1.491,48,1.319,49,1.319,50,1.192,51,1.838,52,1.919,53,1.417,54,0.992,55,1.047,56,0.623,57,0.548,58,0.637,59,0.548,60,0.548,61,0.548,62,0.742,63,0.637,64,0.742,65,0.4,66,0.731,67,0.992,68,1.155,69,1.29,70,1.182,71,0.637,72,1.123,73,0.637,74,0.637,75,1.155,76,0.637,77,0.637,78,0.637,79,0.742,80,0.637,81,0.742,82,0.992,83,0.469,84,0.742,85,1.098,86,1.155,87,0.992,88,0.637,89,0.637,90,0.742,91,0.637,92,1.256,93,0.28,94,0.637,95,0.637,96,0.637,97,0.637,98,1.601,99,0.742,100,1.418,101,0.742,102,1.649,103,0.742,104,1.155,105,1.728,106,0.992,107,0.992,108,1.155,109,1.155,110,1.155,111,1.155,112,1.155,113,1.155,114,0.548,115,0.742,116,0.742,117,0.469,118,0.548,119,1.155,120,0.742,121,1.155,122,0.742,123,1.155,124,1.357,125,0.742,126,1.418,127,1.182,128,0.742,129,1.919,130,0.742,131,0.742,132,0.742,133,1.214,134,1.155,135,0.742,136,1.155,137,0.742,138,1.155,139,1.418,140,1.155,141,0.742,142,1.418,143,1.155,144,0.742,145,1.155,146,1.155,147,1.155,148,1.155,149,0.742,150,1.155,151,0.742,152,0.742,153,0.742,154,1.155,155,0.742,156,0.742,157,0.742,158,0.742,159,0.742,160,1.418,161,1.418,162,1.919,163,0.742,164,1.219,165,0.742,166,0.742,167,1.418,168,0.742,169,0.742,170,0.742,171,0.742,172,0.742,173,0.742,174,0.548,175,0.742,176,0.742,177,0.742,178,0.742,179,0.742,180,0.742,181,0.742,182,0.742,183,0.548,184,1.155,185,0.742,186,0.742,187,0.742,188,0.742,189,1.601,190,1.418,191,0.742,192,0.742,193,0.742,194,2.038,195,0.742,196,0.742,197,1.098,198,0.742,199,0.742,200,0.742,201,0.742,202,1.155,203,0.742,204,0.742,205,0.742,206,0.742,207,0.742,208,0.742,209,1.735,210,1.155,211,1.155,212,0.742,213,0.742,214,1.155,215,1.155,216,1.155,217,0.742,218,1.418,219,1.155,220,0.742,221,1.735,222,1.155,223,0.742,224,0.742,225,0.742,226,0.742,227,0.742,228,0.742,229,0.742,230,0.742,231,0.742,232,0.742,233,0.742,234,1.155,235,1.735,236,0.742,237,0.742,238,0.742,239,0.742,240,0.742,241,0.742,242,0.742,243,0.742,244,0.742,245,1.155,246,0.027,247,0.027,327,1.872]],["title/changelog.html",[93,0.407,332,1.489,333,2.259]],["body/changelog.html",[1,0.72,4,0.443,8,0.837,9,0.837,12,0.04,13,0.443,14,0.536,18,1.059,20,1.438,27,1.048,29,1.163,40,1.114,45,1.357,46,1.236,50,1.256,56,1.053,58,0.837,61,1.048,65,0.902,67,0.837,69,1.236,71,0.837,72,1.302,73,0.837,74,1.219,76,0.837,77,0.837,78,1.808,80,1.219,82,1.579,83,1.29,85,0.898,87,1.219,88,0.837,89,0.837,91,0.837,92,0.617,93,0.536,94,0.837,95,0.837,96,0.837,97,1.438,106,0.837,107,0.837,117,0.617,197,0.617,246,0.034,247,0.034,248,0.837,249,1.673,259,2.363,262,1.346,300,1.346,318,1.346,321,1.623,327,2.284,334,4.682,335,2.043,336,2.043,337,2.043,338,2.043,339,2.043,340,2.043,341,2.043,342,2.043,343,2.974,344,2.974,345,2.974,346,4.917,347,4.948,348,2.974,349,2.043,350,2.043,351,2.043,352,2.043,353,4.882,354,2.043,355,2.043,356,3.852,357,4.682,358,3.852,359,3.769,360,3.852,361,2.043,362,2.043,363,4.273,364,3.852,365,4.273,366,3.852,367,2.786,368,2.043,369,4.744,370,4.744,371,2.043,372,2.974,373,2.974,374,2.043,375,3.507,376,2.043,377,3.06,378,2.043,379,2.043,380,2.974,381,2.043,382,2.043,383,2.043,384,2.043,385,2.043,386,4.411,387,2.043,388,2.974,389,2.043,390,2.043,391,2.043,392,2.043,393,2.043,394,2.043,395,2.043,396,2.043,397,2.974,398,2.043,399,2.043,400,2.043,401,2.043,402,2.043,403,2.043,404,2.043,405,2.043,406,2.043,407,3.852,408,2.363,409,1.957,410,2.043,411,2.043,412,2.043,413,2.043,414,2.043,415,2.043,416,3.507,417,3.507,418,2.043,419,2.043,420,2.043,421,3.852,422,2.043,423,2.974,424,2.043,425,2.043,426,2.043,427,2.043,428,2.043,429,4.094,430,2.043,431,2.974,432,3.507,433,2.043,434,2.043,435,2.043,436,2.043,437,2.043,438,2.043,439,2.974,440,3.507,441,2.043,442,2.043,443,2.974,444,2.974,445,2.974,446,2.974,447,3.507,448,2.043,449,2.043,450,1.623,451,2.043,452,2.043,453,2.043,454,2.043,455,2.043,456,1.623,457,2.043,458,2.043,459,2.043,460,2.043,461,2.043,462,2.043,463,2.043,464,3.719,465,2.974,466,2.043,467,2.043,468,3.507,469,3.507,470,2.043,471,2.043,472,2.043,473,2.043,474,2.043,475,2.043,476,2.043,477,2.043,478,2.043,479,2.043,480,3.507,481,2.043,482,2.043,483,2.043,484,2.043,485,2.043,486,2.974,487,1.623,488,2.043,489,2.043,490,2.043,491,2.974,492,2.043,493,2.043,494,2.043,495,2.043,496,2.043,497,2.043,498,2.043,499,2.043,500,2.043,501,2.043,502,3.507,503,2.043,504,3.06,505,2.974,506,2.043,507,1.623,508,2.043,509,2.043,510,2.043,511,2.043,512,2.974,513,2.043,514,2.043,515,2.043,516,2.043,517,2.043,518,2.043,519,2.043,520,2.043,521,2.043,522,2.043,523,2.043,524,2.043,525,2.043,526,2.043,527,2.043,528,1.623,529,2.043,530,2.043,531,2.043,532,2.043,533,2.043,534,2.043,535,2.043,536,1.623,537,2.043,538,2.043,539,1.623,540,2.043,541,2.043,542,2.043,543,2.043]],["title/dependencies.html",[367,1.795,409,1.784]],["body/dependencies.html",[12,0.056,25,0.894,246,0.053,247,0.053,408,3.274,409,2.299,544,4.121]],["title/miscellaneous/functions.html",[277,1.526,545,0.926]],["body/miscellaneous/functions.html",[6,0.723,12,0.055,48,1.212,49,1.397,246,0.052,247,0.052,274,2.644,277,1.914,278,3.05,279,3.05,325,3.188,326,3.188,327,2.239,545,1.645,546,4.012,547,4.012,548,4.878]],["title/index.html",[6,0.407,93,0.407,332,1.489]],["body/index.html",[3,1.053,12,0.06,13,0.969,25,0.71,27,1.153,40,1.016,50,0.842,55,1.153,57,1.153,59,1.443,63,1.342,65,1.204,72,1.204,83,1.237,93,0.738,197,1.349,246,0.046,247,0.046,249,1.562,252,2.601,254,3.253,359,3.72,409,1.826,450,2.601,456,3.907,487,2.601,504,2.601,507,3.253,528,3.253,549,4.095,550,4.469,551,4.095,552,3.274,553,3.274,554,3.274,555,4.989,556,4.683,557,2.157,558,3.274,559,3.274,560,5.044,561,3.274,562,3.274,563,4.095,564,4.469,565,3.274,566,3.274,567,3.274,568,3.274,569,4.469,570,3.274,571,4.095,572,3.274,573,3.274,574,3.274,575,4.095,576,3.274,577,3.274,578,3.274,579,3.274,580,3.274,581,3.274,582,3.274,583,3.274,584,3.274,585,3.274,586,4.095,587,3.274,588,3.274,589,3.274,590,4.821,591,3.274,592,3.274,593,3.274,594,3.274,595,2.601]],["title/license.html",[93,0.407,332,1.489,557,1.489]],["body/license.html",[4,0.77,12,0.049,26,1.072,28,1.455,50,0.913,83,1.3,197,1.072,246,0.049,247,0.049,260,2.82,464,2.82,557,2.339,595,3.419,596,4.633,597,3.549,598,3.549,599,3.549,600,4.304,601,3.549,602,3.549,603,3.549,604,3.549,605,4.304,606,3.549,607,4.816,608,5.157,609,3.549,610,4.304,611,4.633,612,3.549,613,4.633,614,4.304,615,3.549,616,3.549,617,3.549,618,3.549,619,3.549,620,3.549,621,3.549,622,3.549,623,3.549,624,3.549,625,3.549,626,3.549,627,4.304,628,4.304,629,3.549,630,3.549,631,4.304,632,3.549,633,3.549,634,3.549,635,3.549,636,3.549,637,3.549,638,3.549,639,3.549,640,3.549,641,3.549,642,3.549,643,3.549,644,3.549,645,3.549,646,3.549,647,3.549,648,3.549,649,3.549,650,3.549,651,3.549,652,3.549,653,3.549]],["title/modules.html",[248,1.471]],["body/modules.html",[12,0.053,246,0.053,247,0.053,248,1.696,249,1.974,654,4.136]],["title/overview.html",[655,2.851]],["body/overview.html",[0,0.475,12,0.053,14,0.74,246,0.053,247,0.053,248,1.683,377,3.262,536,3.262,539,3.262,655,3.262]],["title/miscellaneous/typealiases.html",[545,0.926,656,3.197]],["body/miscellaneous/typealiases.html",[5,1.439,6,0.736,11,1.05,12,0.053,46,1.731,246,0.053,247,0.053,277,1.949,545,1.674,657,4.084,658,3.245]],["title/miscellaneous/variables.html",[545,0.926,659,2.54]],["body/miscellaneous/variables.html",[5,1.424,6,0.729,11,1.039,12,0.057,54,2.005,55,1.637,56,1.039,164,1.656,246,0.053,247,0.053,262,2.663,545,1.656,658,3.21,659,3.21]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["0.1.0",{"_index":525,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":477,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":459,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":539,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":420,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":480,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["1265bee",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":536,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["2.0.0",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":464,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2017",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":501,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":476,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":355,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":448,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["44ea67",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":377,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["5.5.x",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["6.0",{"_index":549,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["6016f12",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":484,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":588,"title":{},"body":{"index.html":{}}}],["897b3fe",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":626,"title":{},"body":{"license.html":{}}}],["action",{"_index":647,"title":{},"body":{"license.html":{}}}],["actual",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["ad",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":657,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":78,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["along",{"_index":68,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["and/or",{"_index":620,"title":{},"body":{"license.html":{}}}],["angular",{"_index":359,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/cor",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"dependencies.html":{},"index.html":{}}}],["any).eventlistenersubscriptions[typ",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["app",{"_index":563,"title":{},"body":{"index.html":{}}}],["appli",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["aris",{"_index":651,"title":{},"body":{"license.html":{}}}],["assign",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["associ",{"_index":609,"title":{},"body":{"license.html":{}}}],["author",{"_index":640,"title":{},"body":{"license.html":{}}}],["auto",{"_index":507,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["axi",{"_index":67,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["back",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":454,"title":{},"body":{"changelog.html":{}}}],["be",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["bebd925",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["behaviour",{"_index":80,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["boolean",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["bootstrap",{"_index":566,"title":{},"body":{"index.html":{}}}],["break",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":654,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":597,"title":{},"body":{"license.html":{}}}],["c6771eb",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["candrag",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["case",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["caus",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":333,"title":{"changelog.html":{}},"body":{}}],["changes['dragaxi",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["charg",{"_index":604,"title":{},"body":{"license.html":{}}}],["checkeventlisten",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["claim",{"_index":643,"title":{},"body":{"license.html":{}}}],["class",{"_index":59,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["click",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["clienti",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":280,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["clientx",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["close",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["come",{"_index":581,"title":{},"body":{"index.html":{}}}],["commit",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":318,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["compon",{"_index":528,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["condit",{"_index":625,"title":{},"body":{"license.html":{}}}],["config",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":653,"title":{},"body":{"license.html":{}}}],["console.log('el",{"_index":573,"title":{},"body":{"index.html":{}}}],["const",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["constructor",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["constructor(el",{"_index":323,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["content",{"_index":554,"title":{},"body":{"index.html":{}}}],["continu",{"_index":592,"title":{},"body":{"index.html":{}}}],["contract",{"_index":648,"title":{},"body":{"license.html":{}}}],["control",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["coordin",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["copi",{"_index":607,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":596,"title":{},"body":{"license.html":{}}}],["creat",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":583,"title":{},"body":{"index.html":{}}}],["currentdrag",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdrag.complet",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdrag.next",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdragdata",{"_index":289,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["currentdragdropdata",{"_index":294,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["currentdragsubscript",{"_index":288,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["cursor",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["custom",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["customis",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":644,"title":{},"body":{"license.html":{}}}],["data",{"_index":63,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["dc0f863",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":610,"title":{},"body":{"license.html":{}}}],["declar",{"_index":252,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["default",{"_index":262,"title":{},"body":{"directives/DraggableDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":263,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["delet",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["demo",{"_index":550,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":564,"title":{},"body":{"index.html":{}}}],["demomodul",{"_index":567,"title":{},"body":{"index.html":{}}}],["depend",{"_index":409,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["destroy",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":450,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["develop",{"_index":556,"title":{},"body":{"index.html":{}}}],["devic",{"_index":89,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["didn't",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":313,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["direct",{"_index":14,"title":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"overview.html":{}}}],["directori",{"_index":584,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["dispos",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchang",{"_index":276,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["distribut",{"_index":618,"title":{},"body":{"license.html":{}}}],["do",{"_index":303,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["document",{"_index":197,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["dont",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":72,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["drag.pip",{"_index":295,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["drag.pipe(mergemap",{"_index":316,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["draganddropmodul",{"_index":249,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":565,"title":{},"body":{"index.html":{}}}],["dragaxi",{"_index":43,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragaxix",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["dragcontain",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":84,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragend",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragend(ev",{"_index":572,"title":{},"body":{"index.html":{}}}],["dragent",{"_index":322,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["draggabl",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["draggable.direct",{"_index":256,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirect",{"_index":60,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["draggablehelp",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragleav",{"_index":285,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["dragov",{"_index":287,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["dragoveract",{"_index":298,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["dragpointerdown",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragsnapgrid",{"_index":74,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragstart",{"_index":95,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["drop",{"_index":65,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["drop.module.t",{"_index":251,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":66,"title":{"interfaces/DropData.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["droppabl",{"_index":504,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["droppable.direct",{"_index":257,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.j",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.j",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["droppable/demo",{"_index":552,"title":{},"body":{"index.html":{}}}],["droppable/dist/umd/angular",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["droppable/doc",{"_index":577,"title":{},"body":{"index.html":{}}}],["droppabledirect",{"_index":253,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"directives/DroppableDirective.html":{}}}],["droppablerectangl",{"_index":292,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["droppablethen",{"_index":562,"title":{},"body":{"index.html":{}}}],["droppeddata",{"_index":571,"title":{},"body":{"index.html":{}}}],["duplic",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":69,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["elementref",{"_index":16,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["emit",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["end",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":518,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":579,"title":{},"body":{"index.html":{}}}],["error",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches[0].clienti",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.changedtouches[0].clientx",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.clienti",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.clientx",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.touches[0].clienti",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.touches[0].clientx",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["eventemitt",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["eventlistenersubscript",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["export",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["express",{"_index":633,"title":{},"body":{"license.html":{}}}],["f29b424",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":314,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["fb75711",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["filter(([didoverlap",{"_index":312,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["filter(([previ",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["find",{"_index":574,"title":{},"body":{"index.html":{}}}],["fire",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":636,"title":{},"body":{"license.html":{}}}],["fix",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":624,"title":{},"body":{"license.html":{}}}],["forroot",{"_index":259,"title":{},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{}}}],["free",{"_index":603,"title":{},"body":{"license.html":{}}}],["function",{"_index":277,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["furnish",{"_index":623,"title":{},"body":{"license.html":{}}}],["gener",{"_index":576,"title":{},"body":{"index.html":{}}}],["get",{"_index":332,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["ghost",{"_index":76,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostdragen",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["grant",{"_index":602,"title":{},"body":{"license.html":{}}}],["grid",{"_index":73,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["guidelin",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["haseventlisten",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["helper.provid",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["here",{"_index":569,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":601,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["higher",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":641,"title":{},"body":{"license.html":{}}}],["hover",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":551,"title":{},"body":{"index.html":{}}}],["icon",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":61,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["impli",{"_index":634,"title":{},"body":{"license.html":{}}}],["import",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":613,"title":{},"body":{"license.html":{}}}],["index",{"_index":6,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["input",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["insid",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["instal",{"_index":555,"title":{},"body":{"index.html":{}}}],["interact",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DropData.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"overview.html":{}}}],["iscoordinatewithinrectangl",{"_index":278,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":547,"title":{},"body":{"miscellaneous/functions.html":{}}}],["item",{"_index":570,"title":{},"body":{"index.html":{}}}],["kind",{"_index":632,"title":{},"body":{"license.html":{}}}],["lazili",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["leav",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["lettabl",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":599,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":645,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":642,"title":{},"body":{"license.html":{}}}],["librari",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":557,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":614,"title":{},"body":{"license.html":{}}}],["listen",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":582,"title":{},"body":{"index.html":{}}}],["lock",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["loosen",{"_index":453,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map((movedata",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map((pointermoveev",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["match",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(movedata.i",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["math.floor(movedata.x",{"_index":141,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["matt",{"_index":598,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":635,"title":{},"body":{"license.html":{}}}],["merg",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"license.html":{}}}],["mergemap",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mergemap((pointerdownev",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["metadata",{"_index":261,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":465,"title":{},"body":{"changelog.html":{}}}],["mimic",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["miscellan",{"_index":545,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":595,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":616,"title":{},"body":{"license.html":{}}}],["modul",{"_index":248,"title":{"modules/DragAndDropModule.html":{},"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"modules.html":{},"overview.html":{}}}],["modulewithprovid",{"_index":255,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["mous",{"_index":87,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mousedown",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mouseent",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseev",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseleav",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemov",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveev",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveevent.clienti",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveevent.clientx",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseup",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["move",{"_index":56,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["move_cursor",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/variables.html":{}}}],["movedata",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.i",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.x",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["moz",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ms",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mwldraggabl",{"_index":58,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mwldroppabl",{"_index":321,"title":{},"body":{"directives/DroppableDirective.html":{},"changelog.html":{}}}],["name",{"_index":326,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["next",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["next.i",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["next.x",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ng",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["ng4",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":254,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngondestroy",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngoninit",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngzone",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["node.j",{"_index":580,"title":{},"body":{"index.html":{}}}],["none",{"_index":176,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["noninfring",{"_index":639,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":627,"title":{},"body":{"license.html":{}}}],["now",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":560,"title":{},"body":{"index.html":{}}}],["number",{"_index":10,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["o",{"_index":239,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object",{"_index":62,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach(typ",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":191,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["observ",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["obtain",{"_index":606,"title":{},"body":{"license.html":{}}}],["old",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["on",{"_index":86,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onc",{"_index":487,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchang",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ondestroy",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["oninit",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmousedown(ev",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseent",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseleav",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseup(ev",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ontouchend(ev",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ontouchstart(ev",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["oper",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":327,"title":{},"body":{"directives/DroppableDirective.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":482,"title":{},"body":{"changelog.html":{}}}],["otherwis",{"_index":650,"title":{},"body":{"license.html":{}}}],["out",{"_index":652,"title":{},"body":{"license.html":{}}}],["output",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["outsid",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":286,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overlap",{"_index":284,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overlaps)).subscrib",{"_index":317,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overlaps.pipe(distinctuntilchang",{"_index":297,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overlaps.pipe(filter(overlapsnow",{"_index":308,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overlapschang",{"_index":296,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow",{"_index":306,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow)).subscrib",{"_index":309,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["overview",{"_index":655,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":367,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":383,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["paramet",{"_index":325,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":637,"title":{},"body":{"license.html":{}}}],["pass",{"_index":64,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["path",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":408,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["perform",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":600,"title":{},"body":{"license.html":{}}}],["permit",{"_index":622,"title":{},"body":{"license.html":{}}}],["person",{"_index":605,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(filt",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(filter(overlapsnow",{"_index":305,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["pipe(map(([previ",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(pairwis",{"_index":311,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["pipe(shar",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(takeuntil(merge(this.pointerup",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointer",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["pointerdown",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.clienti",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.clientx",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.event.preventdefault",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdrag",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdrag.pipe(pairwis",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdrag.pipe(take(1)).pipe(map(valu",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerev",{"_index":47,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermov",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermove.pipe(take(1)).subscrib",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermove.pipe(takelast(1)).subscrib",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermoveevent.clienti",{"_index":136,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermoveevent.clientx",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermoveevent.event.preventdefault",{"_index":132,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerup",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["port",{"_index":587,"title":{},"body":{"index.html":{}}}],["portion",{"_index":630,"title":{},"body":{"license.html":{}}}],["posit",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["power",{"_index":558,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":578,"title":{},"body":{"index.html":{}}}],["press",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["prevent",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["previou",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["previous.i",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["previous.x",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["privat",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["project",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["properti",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["prototyp",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":260,"title":{},"body":{"modules/DragAndDropModule.html":{},"license.html":{}}}],["public",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["publish",{"_index":617,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":638,"title":{},"body":{"license.html":{}}}],["rect",{"_index":279,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["rect.left",{"_index":281,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["rect.top",{"_index":282,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["regular",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":593,"title":{},"body":{"index.html":{}}}],["releaselicens",{"_index":594,"title":{},"body":{"index.html":{}}}],["reload",{"_index":589,"title":{},"body":{"index.html":{}}}],["remov",{"_index":468,"title":{},"body":{"changelog.html":{}}}],["renam",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["renderer2",{"_index":17,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["repliat",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":585,"title":{},"body":{"index.html":{}}}],["requir",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":612,"title":{},"body":{"license.html":{}}}],["result",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["revert",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":615,"title":{},"body":{"license.html":{}}}],["run",{"_index":456,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["same",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":561,"title":{},"body":{"index.html":{}}}],["seamless",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":300,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["selector",{"_index":57,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["sell",{"_index":621,"title":{},"body":{"license.html":{}}}],["server",{"_index":586,"title":{},"body":{"index.html":{}}}],["setcsstransform(valu",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["setcursor(valu",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["shall",{"_index":628,"title":{},"body":{"license.html":{}}}],["share",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["show",{"_index":75,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["simplechang",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["snap",{"_index":71,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["snapgrid",{"_index":45,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["softwar",{"_index":608,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["src/.../draggable.directive.t",{"_index":658,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../droppable.directive.t",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/drag",{"_index":250,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["src/draggable.directive.t",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/draggable.directive.ts:100",{"_index":271,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:105",{"_index":270,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:59",{"_index":267,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:64",{"_index":264,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:69",{"_index":266,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:74",{"_index":268,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:79",{"_index":269,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:84",{"_index":265,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:89",{"_index":272,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/draggable.directive.ts:95",{"_index":273,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["src/droppable.directive.t",{"_index":274,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["src/droppable.directive.ts:44",{"_index":328,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["src/droppable.directive.ts:49",{"_index":329,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["src/droppable.directive.ts:54",{"_index":330,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["src/droppable.directive.ts:59",{"_index":331,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["src/droppable.directive.ts:61",{"_index":324,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["standard",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":93,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["static",{"_index":258,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["stop",{"_index":283,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["string",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["subject",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"license.html":{}}}],["sublicens",{"_index":619,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["subscript",{"_index":275,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["substanti",{"_index":629,"title":{},"body":{"license.html":{}}}],["system.j",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["tabl",{"_index":553,"title":{},"body":{"index.html":{}}}],["take",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takelast",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takeuntil",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["templat",{"_index":568,"title":{},"body":{"index.html":{}}}],["test",{"_index":590,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":591,"title":{},"body":{"index.html":{}}}],["text",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["there'",{"_index":301,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.candrag",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.checkeventlisten",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.currentdragsubscript",{"_index":290,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.currentdragsubscription.unsubscrib",{"_index":320,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.dragaxis.i",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragaxis.x",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragend.next",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragenter.next",{"_index":307,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.draggablehelper.currentdrag.subscrib",{"_index":291,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.dragging.next",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragleave.next",{"_index":315,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.dragover.next",{"_index":310,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.dragpointerdown.next",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragsnapgrid.i",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragsnapgrid.x",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragstart.next",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.drop.next",{"_index":319,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.dropdata",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeel",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":293,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseent",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseleav",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mousemov",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchmov",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostdragen",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmousedown(ev",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseent",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseleav",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseup(ev",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ontouchend(ev",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ontouchstart(ev",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown.complet",{"_index":185,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown.next",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointermov",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointermove.complet",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointermove.next",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup.complet",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup.next",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.listen",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyl",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyle(this.element.nativeel",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcsstransform",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcsstransform(`translate(${x}px",{"_index":177,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcursor",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcursor(this.dragcursor",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.unsubscribeeventlisten",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.validatedrag",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.zone.run",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.zone.runoutsideangular",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["through",{"_index":559,"title":{},"body":{"index.html":{}}}],["todo",{"_index":299,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["tort",{"_index":649,"title":{},"body":{"license.html":{}}}],["touch",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["touchcancel",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchend",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchev",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmov",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveev",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchstart",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transform",{"_index":235,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformattribut",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformattributes.foreach(transformattribut",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["true",{"_index":70,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["type",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":656,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":390,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":548,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unsubscribeeventlisten",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["until",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["upgrad",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":83,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["valid",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["valu",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":659,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":304,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["view",{"_index":575,"title":{},"body":{"index.html":{}}}],["void",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["warranti",{"_index":631,"title":{},"body":{"license.html":{}}}],["way",{"_index":302,"title":{},"body":{"interfaces/DropData.html":{},"directives/DroppableDirective.html":{}}}],["webkit",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["whether",{"_index":646,"title":{},"body":{"license.html":{}}}],["without",{"_index":611,"title":{},"body":{"license.html":{}}}],["work",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["wors",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":8,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["y",{"_index":9,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["yourself",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["y}px",{"_index":178,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["zone",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"directives/DraggableDirective.html":{},"interfaces/DropData.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject, Observable, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform('');\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                ''\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private setCssTransform(value: string): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n  Modules\n  DragAndDropModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/drag-and-drop.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                DraggableDirective\n                            \n                            \n                                DroppableDirective\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    DraggableDirective\n                            \n                            \n                                    DroppableDirective\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableHelper } from './draggable-helper.provider';\n\n@NgModule({\n  declarations: [DraggableDirective, DroppableDirective],\n  exports: [DraggableDirective, DroppableDirective]\n})\nexport class DragAndDropModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DragAndDropModule,\n      providers: [DraggableHelper]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject, Observable, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform('');\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                ''\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private setCssTransform(value: string): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/draggable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlDraggable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                    \n                        The axis along which the element is draggable\n\n                            \n                            Type:    DragAxis\n\n                            \n                        \n                            Default value: { x: true, y: true }\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                    \n                        The cursor to use when dragging the element\n\n                        \n                            Default value: MOVE_CURSOR\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:84\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                    \n                        Snap all drags to an x / y grid\n\n                            \n                            Type:    SnapGrid\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:69\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                    \n                        an object of data you can pass to the drop event\n\n                            \n                            Type:    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: true\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:74\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                            \n                            Type:    ValidateDrag\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:79\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                    \n                        Called after the element is dragged\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:105\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                    \n                        Called when the element is being dragged\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:100\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:89\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/draggable.directive.ts:95\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject, Observable, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform('');\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                ''\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private setCssTransform(value: string): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropData.html":{"url":"interfaces/DropData.html","title":"interface - DropData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DropData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/droppable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dropData\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                    \n                                \n                                \n                                    \n                                        dropData:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  pairwise,\n  filter,\n  map,\n  mergeMap\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY ();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter();\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    interface CurrentDragData {\n      clientX: number;\n      clientY: number;\n      dropData: any;\n    }\n\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag: Subject) => {\n        const droppableRectangle: ClientRect = this.element.nativeElement.getBoundingClientRect();\n\n        let currentDragDropData: any;\n        const overlaps = drag.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            return isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableRectangle\n            );\n          })\n        );\n\n        const overlapsChanged = overlaps.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged\n          .pipe(pairwise())\n          .pipe(\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag.pipe(mergeMap(() => overlaps)).subscribe({\n          complete: () => {\n            if (dragOverActive) {\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.currentDragSubscription.unsubscribe();\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/droppable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlDroppable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, draggableHelper: DraggableHelper, zone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/droppable.directive.ts:61\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        draggableHelper\n                                                  \n                                                        \n                                                                    DraggableHelper\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                    \n                        Called when a draggable element starts overlapping the element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/droppable.directive.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                    \n                        Called when a draggable element stops overlapping the element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/droppable.directive.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                    \n                        Called when a draggable element is moved over the element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/droppable.directive.ts:54\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                    \n                        Called when a draggable element is dropped on this element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/droppable.directive.ts:59\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentDragSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentDragSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/droppable.directive.ts:61\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone\n} from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  pairwise,\n  filter,\n  map,\n  mergeMap\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY ();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter();\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    interface CurrentDragData {\n      clientX: number;\n      clientY: number;\n      dropData: any;\n    }\n\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag: Subject) => {\n        const droppableRectangle: ClientRect = this.element.nativeElement.getBoundingClientRect();\n\n        let currentDragDropData: any;\n        const overlaps = drag.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            return isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableRectangle\n            );\n          })\n        );\n\n        const overlapsChanged = overlaps.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged\n          .pipe(pairwise())\n          .pipe(\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag.pipe(mergeMap(() => overlaps)).subscribe({\n          complete: () => {\n            if (dragOverActive) {\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.currentDragSubscription.unsubscribe();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject, Observable, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform('');\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                ''\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private setCssTransform(value: string): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        x\n                                \n                                \n                                            Optional\n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject, Observable, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter\n} from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform('');\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                ''\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private setCssTransform(value: string): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : >=6.0.0 \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (src/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/droppable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            isCoordinateWithinRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \nisCoordinateWithinRectangle(clientX: undefined, clientY: undefined, rect: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        rect\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 6.0+ drag and drop\n\n\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/demo/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 6.0+\nInstallation\nInstall through npm:\nnpm install --save angular-draggable-droppableThen use it in your app like so:\nimport { Component, NgModule } from '@angular/core';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\n\n@NgModule({\n  declarations: [DemoApp],\n  imports: [DragAndDropModule.forRoot()],\n  bootstrap: [DemoApp]\n})\nclass DemoModule {}\n\n@Component({\n  selector: 'demo-app',\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        \n                            1 module\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        2 directives\n                    \n                \n            \n            \n                \n                    \n                        \n                        5 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (src/.../draggable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/draggable.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        ValidateDrag\n                    \n                \n                \n                    \n                        ValidateDrag:     function\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MOVE_CURSOR   (src/.../draggable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/draggable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MOVE_CURSOR\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOVE_CURSOR:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'move'\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
