var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/Coordinates.html",[0,0.024,1,0.636]],["body/interfaces/Coordinates.html",[0,0.042,1,1.035,2,0.386,3,0.329,4,0.276,5,0.276,6,0.356,7,0.516,8,0.329,9,1.006,10,1.359,11,1.359,12,1.108,13,0.766,14,0.053,15,0.614,16,0.338,17,0.67,18,0.67,19,0.67,20,0.861,21,0.999,22,0.969,23,0.67,24,0.882,25,0.67,26,0.882,27,0.59,28,0.882,29,0.882,30,0.491,31,0.276,32,1.15,33,0.67,34,0.923,35,1.056,36,0.59,37,0.386,38,0.67,39,0.59,40,0.59,41,0.59,42,0.59,43,0.448,44,1.254,45,0.802,46,0.882,47,0.59,48,0.448,49,0.59,50,0.802,51,0.448,52,0.892,53,0.59,54,0.577,55,0.588,56,0.386,57,0.813,58,0.923,59,1.088,60,0.67,61,0.516,62,1.056,63,0.516,64,1.172,65,0.516,66,0.516,67,1.024,68,0.802,69,0.771,70,0.955,71,0.955,72,0.715,73,1.316,74,1.364,75,0.386,76,0.516,77,0.412,78,0.448,79,0.386,80,0.59,81,0.516,82,0.59,83,0.329,84,0.67,85,0.771,86,0.882,87,1.029,88,0.999,89,0.516,90,0.853,91,0.516,92,0.516,93,0.923,94,1.024,95,0.771,96,0.516,97,0.59,98,0.448,99,0.516,100,0.59,101,0.516,102,0.59,103,0.923,104,0.386,105,0.516,106,0.82,107,0.516,108,0.516,109,0.577,110,0.386,111,0.516,112,0.516,113,1.172,114,0.516,115,1.172,116,0.516,117,0.516,118,0.59,119,0.516,120,0.59,121,0.59,122,1.056,123,0.516,124,0.892,125,0.882,126,0.771,127,0.516,128,0.516,129,0.59,130,0.516,131,0.981,132,0.179,133,0.516,134,0.386,135,0.59,136,0.516,137,0.516,138,0.771,139,0.516,140,0.516,141,1.024,142,1.254,143,0.59,144,1.056,145,0.59,146,1.217,147,0.59,148,0.882,149,1.596,150,0.771,151,0.771,152,0.882,153,0.882,154,0.882,155,0.882,156,0.882,157,0.882,158,0.59,159,0.882,160,0.516,161,0.448,162,0.448,163,0.386,164,0.59,165,0.67,166,0.59,167,0.448,168,0.882,169,1.207,170,0.59,171,0.59,172,0.882,173,0.59,174,0.59,175,0.516,176,0.516,177,0.386,178,1.254,179,0.59,180,0.882,181,0.59,182,0.59,183,0.771,184,0.59,185,0.59,186,0.59,187,0.59,188,0.516,189,0.882,190,1.024,191,1.172,192,0.882,193,0.882,194,0.59,195,0.59,196,0.882,197,0.59,198,0.59,199,0.67,200,0.448,201,0.386,202,1.139,203,0.59,204,0.59,205,0.59,206,0.802,207,0.59,208,1.056,209,0.952,210,0.59,211,1.192,212,0.59,213,0.59,214,0.59,215,0.59,216,0.59,217,0.59,218,0.59,219,0.59,220,0.882,221,0.882,222,0.59,223,0.882,224,0.882,225,0.59,226,0.59,227,0.59,228,0.59,229,0.59,230,1.056,231,1.056,232,1.056,233,0.59,234,1.056,235,1.056,236,0.59,237,1.056,238,0.882,239,0.882,240,0.882,241,0.59,242,0.59,243,0.882,244,0.59,245,0.59,246,0.882,247,0.59,248,0.882,249,1.056,250,0.59,251,0.59,252,0.59,253,0.448,254,1.064,255,0.67,256,0.59,257,0.386,258,0.448,259,0.923,260,0.59,261,0.59,262,0.882,263,0.882,264,0.59,265,0.59,266,0.59,267,0.59,268,1.056,269,0.59,270,0.516,271,0.516,272,1.056,273,0.59,274,1.056,275,0.59,276,0.59,277,0.59,278,0.59,279,0.59,280,0.59,281,0.516,282,0.882,283,0.59,284,0.59,285,0.59,286,0.59,287,0.59,288,0.59,289,0.59,290,0.59,291,0.882,292,0.59,293,0.59,294,0.59,295,0.59,296,0.59,297,1.056,298,0.59,299,0.59,300,0.59,301,0.59,302,0.802,303,0.59,304,0.448,305,0.59,306,0.59,307,0.59,308,0.59,309,0.59,310,0.59,311,0.771,312,0.59,313,0.59,314,0.59,315,0.59,316,0.59,317,0.59,318,0.59,319,0.59,320,0.59,321,1.46,322,0.59,323,0.59,324,0.59,325,0.59,326,0.59,327,0.59,328,0.59,329,0.59,330,0.448,331,0.882,332,0.59,333,0.59,334,0.59,335,0.59,336,0.59,337,1.172,338,1.056,339,0.59,340,0.59,341,0.59,342,1.088,343,0.59,344,0.59,345,0.59,346,0.59,347,0.59,348,0.59,349,0.882,350,0.59,351,0.59,352,0.59,353,0.59,354,0.59,355,0.59,356,1.254,357,0.882,358,0.882,359,0.59,360,0.59,361,0.882,362,0.882,363,0.882,364,0.59,365,1.056,366,0.882,367,0.59,368,1.254,369,0.882,370,0.59,371,0.59,372,0.59,373,0.59,374,0.59,375,0.59,376,0.59,377,0.59,378,0.59,379,0.59,380,0.59,381,0.59,382,0.59,383,0.59,384,0.59,385,0.882,386,0.59,387,0.882,388,0.59,389,0.59,390,0.59,391,0.59,392,0.59,393,0.59,394,0.59,395,0.59,396,0.59,397,0.59,398,0.027,399,0.027]],["title/modules/DragAndDropModule.html",[400,1.239,401,1.415]],["body/modules/DragAndDropModule.html",[2,0.83,3,0.707,4,0.592,5,0.592,6,0.447,14,0.052,15,0.745,31,0.592,54,1.014,55,0.707,56,0.83,57,0.864,77,0.592,78,1.232,398,0.045,399,0.045,400,1.876,401,2.482,402,4.221,403,4.221,404,3.942,405,3.152,406,3.942,407,4.221,408,4.221]],["title/interfaces/DragAxis.html",[0,0.024,58,0.732]],["body/interfaces/DragAxis.html",[0,0.042,1,0.999,2,0.386,3,0.329,4,0.276,5,0.276,6,0.356,7,0.516,8,0.329,9,1.006,10,1.359,11,1.359,12,0.999,13,0.766,14,0.053,15,0.614,16,0.338,17,0.67,18,0.67,19,0.67,20,0.861,21,0.999,22,0.969,23,0.67,24,0.882,25,0.67,26,0.882,27,0.59,28,0.882,29,0.882,30,0.491,31,0.276,32,1.15,33,0.67,34,0.923,35,1.056,36,0.59,37,0.386,38,0.67,39,0.59,40,0.59,41,0.59,42,0.59,43,0.448,44,1.254,45,0.802,46,0.882,47,0.59,48,0.448,49,0.59,50,0.802,51,0.448,52,0.892,53,0.59,54,0.577,55,0.588,56,0.386,57,0.813,58,1.024,59,1.151,60,0.67,61,0.516,62,1.056,63,0.516,64,1.172,65,0.516,66,0.516,67,1.024,68,0.802,69,0.771,70,0.955,71,0.955,72,0.715,73,1.316,74,1.364,75,0.386,76,0.516,77,0.412,78,0.448,79,0.386,80,0.59,81,0.516,82,0.59,83,0.329,84,0.67,85,0.771,86,0.882,87,1.029,88,0.999,89,0.516,90,0.853,91,0.516,92,0.516,93,0.923,94,1.024,95,0.771,96,0.516,97,0.59,98,0.448,99,0.516,100,0.59,101,0.516,102,0.59,103,0.923,104,0.386,105,0.516,106,0.82,107,0.516,108,0.516,109,0.577,110,0.386,111,0.516,112,0.516,113,1.172,114,0.516,115,1.172,116,0.516,117,0.516,118,0.59,119,0.516,120,0.59,121,0.59,122,1.056,123,0.516,124,0.892,125,0.882,126,0.771,127,0.516,128,0.516,129,0.59,130,0.516,131,0.981,132,0.179,133,0.516,134,0.386,135,0.59,136,0.516,137,0.516,138,0.771,139,0.516,140,0.516,141,1.024,142,1.254,143,0.59,144,1.056,145,0.59,146,1.217,147,0.59,148,0.882,149,1.596,150,0.771,151,0.771,152,0.882,153,0.882,154,0.882,155,0.882,156,0.882,157,0.882,158,0.59,159,0.882,160,0.516,161,0.448,162,0.448,163,0.386,164,0.59,165,0.67,166,0.59,167,0.448,168,0.882,169,1.207,170,0.59,171,0.59,172,0.882,173,0.59,174,0.59,175,0.516,176,0.516,177,0.386,178,1.254,179,0.59,180,0.882,181,0.59,182,0.59,183,0.771,184,0.59,185,0.59,186,0.59,187,0.59,188,0.516,189,0.882,190,1.024,191,1.172,192,0.882,193,0.882,194,0.59,195,0.59,196,0.882,197,0.59,198,0.59,199,0.67,200,0.448,201,0.386,202,1.139,203,0.59,204,0.59,205,0.59,206,0.802,207,0.59,208,1.056,209,0.952,210,0.59,211,1.192,212,0.59,213,0.59,214,0.59,215,0.59,216,0.59,217,0.59,218,0.59,219,0.59,220,0.882,221,0.882,222,0.59,223,0.882,224,0.882,225,0.59,226,0.59,227,0.59,228,0.59,229,0.59,230,1.056,231,1.056,232,1.056,233,0.59,234,1.056,235,1.056,236,0.59,237,1.056,238,0.882,239,0.882,240,0.882,241,0.59,242,0.59,243,0.882,244,0.59,245,0.59,246,0.882,247,0.59,248,0.882,249,1.056,250,0.59,251,0.59,252,0.59,253,0.448,254,1.064,255,0.67,256,0.59,257,0.386,258,0.448,259,0.923,260,0.59,261,0.59,262,0.882,263,0.882,264,0.59,265,0.59,266,0.59,267,0.59,268,1.056,269,0.59,270,0.516,271,0.516,272,1.056,273,0.59,274,1.056,275,0.59,276,0.59,277,0.59,278,0.59,279,0.59,280,0.59,281,0.516,282,0.882,283,0.59,284,0.59,285,0.59,286,0.59,287,0.59,288,0.59,289,0.59,290,0.59,291,0.882,292,0.59,293,0.59,294,0.59,295,0.59,296,0.59,297,1.056,298,0.59,299,0.59,300,0.59,301,0.59,302,0.802,303,0.59,304,0.448,305,0.59,306,0.59,307,0.59,308,0.59,309,0.59,310,0.59,311,0.771,312,0.59,313,0.59,314,0.59,315,0.59,316,0.59,317,0.59,318,0.59,319,0.59,320,0.59,321,1.46,322,0.59,323,0.59,324,0.59,325,0.59,326,0.59,327,0.59,328,0.59,329,0.59,330,0.448,331,0.882,332,0.59,333,0.59,334,0.59,335,0.59,336,0.59,337,1.172,338,1.056,339,0.59,340,0.59,341,0.59,342,1.088,343,0.59,344,0.59,345,0.59,346,0.59,347,0.59,348,0.59,349,0.882,350,0.59,351,0.59,352,0.59,353,0.59,354,0.59,355,0.59,356,1.254,357,0.882,358,0.882,359,0.59,360,0.59,361,0.882,362,0.882,363,0.882,364,0.59,365,1.056,366,0.882,367,0.59,368,1.254,369,0.882,370,0.59,371,0.59,372,0.59,373,0.59,374,0.59,375,0.59,376,0.59,377,0.59,378,0.59,379,0.59,380,0.59,381,0.59,382,0.59,383,0.59,384,0.59,385,0.882,386,0.59,387,0.882,388,0.59,389,0.59,390,0.59,391,0.59,392,0.59,393,0.59,394,0.59,395,0.59,396,0.59,397,0.59,398,0.027,399,0.027]],["title/interfaces/DragEndEvent.html",[0,0.024,66,0.732]],["body/interfaces/DragEndEvent.html",[0,0.042,1,1.036,2,0.387,3,0.329,4,0.276,5,0.276,6,0.357,7,0.517,8,0.329,9,1.007,10,1.326,11,1.326,12,1,13,0.692,14,0.053,15,0.615,16,0.338,17,0.671,18,0.671,19,0.671,20,0.861,21,1,22,0.969,23,0.671,24,0.883,25,0.671,26,0.883,27,0.591,28,0.883,29,0.883,30,0.492,31,0.276,32,1.151,33,0.671,34,0.924,35,1.058,36,0.591,37,0.387,38,0.671,39,0.591,40,0.591,41,0.591,42,0.591,43,0.449,44,1.255,45,0.803,46,0.883,47,0.591,48,0.449,49,0.591,50,0.803,51,0.449,52,0.893,53,0.591,54,0.578,55,0.589,56,0.387,57,0.813,58,0.924,59,1.125,60,0.671,61,0.517,62,1.173,63,0.517,64,1.173,65,0.517,66,0.772,67,1.193,68,0.803,69,0.772,70,0.955,71,0.955,72,0.715,73,1.317,74,1.365,75,0.387,76,0.517,77,0.413,78,0.449,79,0.387,80,0.591,81,0.517,82,0.591,83,0.329,84,0.671,85,0.772,86,0.883,87,1.03,88,1,89,0.517,90,0.853,91,0.517,92,0.517,93,0.924,94,1.025,95,0.772,96,0.517,97,0.591,98,0.449,99,0.517,100,0.591,101,0.517,102,0.591,103,0.924,104,0.387,105,0.517,106,0.821,107,0.517,108,0.517,109,0.578,110,0.387,111,0.517,112,0.517,113,1.173,114,0.517,115,1.173,116,0.517,117,0.517,118,0.591,119,0.517,120,0.591,121,0.591,122,1.058,123,0.517,124,0.893,125,0.883,126,0.772,127,0.517,128,0.517,129,0.591,130,0.517,131,0.982,132,0.18,133,0.517,134,0.387,135,0.591,136,0.517,137,0.517,138,0.772,139,0.517,140,0.517,141,1.025,142,1.255,143,0.591,144,1.058,145,0.591,146,1.217,147,0.591,148,0.883,149,1.597,150,0.772,151,0.772,152,0.883,153,0.883,154,0.883,155,0.883,156,0.883,157,0.883,158,0.591,159,0.883,160,0.517,161,0.449,162,0.449,163,0.387,164,0.591,165,0.671,166,0.591,167,0.449,168,0.883,169,1.207,170,0.591,171,0.591,172,0.883,173,0.591,174,0.591,175,0.517,176,0.517,177,0.387,178,1.255,179,0.591,180,0.883,181,0.591,182,0.591,183,0.772,184,0.591,185,0.591,186,0.591,187,0.591,188,0.517,189,0.883,190,1.025,191,1.173,192,0.883,193,0.883,194,0.591,195,0.591,196,0.883,197,0.591,198,0.591,199,0.671,200,0.449,201,0.387,202,1.14,203,0.591,204,0.591,205,0.591,206,0.803,207,0.591,208,1.058,209,0.953,210,0.591,211,1.193,212,0.591,213,0.591,214,0.591,215,0.591,216,0.591,217,0.591,218,0.591,219,0.591,220,0.883,221,0.883,222,0.591,223,0.883,224,0.883,225,0.591,226,0.591,227,0.591,228,0.591,229,0.591,230,1.058,231,1.058,232,1.058,233,0.591,234,1.058,235,1.058,236,0.591,237,1.058,238,0.883,239,0.883,240,0.883,241,0.591,242,0.591,243,0.883,244,0.591,245,0.591,246,0.883,247,0.591,248,0.883,249,1.058,250,0.591,251,0.591,252,0.591,253,0.449,254,1.065,255,0.671,256,0.591,257,0.387,258,0.449,259,0.924,260,0.591,261,0.591,262,0.883,263,0.883,264,0.591,265,0.591,266,0.591,267,0.591,268,1.058,269,0.591,270,0.517,271,0.517,272,1.058,273,0.591,274,1.058,275,0.591,276,0.591,277,0.591,278,0.591,279,0.591,280,0.591,281,0.517,282,0.883,283,0.591,284,0.591,285,0.591,286,0.591,287,0.591,288,0.591,289,0.591,290,0.591,291,0.883,292,0.591,293,0.591,294,0.591,295,0.591,296,0.591,297,1.058,298,0.591,299,0.591,300,0.591,301,0.591,302,0.803,303,0.591,304,0.449,305,0.591,306,0.591,307,0.591,308,0.591,309,0.591,310,0.591,311,0.772,312,0.591,313,0.591,314,0.591,315,0.591,316,0.591,317,0.591,318,0.591,319,0.591,320,0.591,321,1.46,322,0.591,323,0.591,324,0.591,325,0.591,326,0.591,327,0.591,328,0.591,329,0.591,330,0.449,331,0.883,332,0.591,333,0.591,334,0.591,335,0.591,336,0.591,337,1.173,338,1.058,339,0.591,340,0.591,341,0.591,342,1.089,343,0.591,344,0.591,345,0.591,346,0.591,347,0.591,348,0.591,349,0.883,350,0.591,351,0.591,352,0.591,353,0.591,354,0.591,355,0.591,356,1.255,357,0.883,358,0.883,359,0.591,360,0.591,361,0.883,362,0.883,363,0.883,364,0.591,365,1.058,366,0.883,367,0.591,368,1.255,369,0.883,370,0.591,371,0.591,372,0.591,373,0.591,374,0.591,375,0.591,376,0.591,377,0.591,378,0.591,379,0.591,380,0.591,381,0.591,382,0.591,383,0.591,384,0.591,385,0.883,386,0.591,387,0.883,388,0.591,389,0.591,390,0.591,391,0.591,392,0.591,393,0.591,394,0.591,395,0.591,396,0.591,397,0.591,398,0.027,399,0.027]],["title/interfaces/DragMoveEvent.html",[0,0.024,65,0.732]],["body/interfaces/DragMoveEvent.html",[0,0.042,1,1.038,2,0.388,3,0.331,4,0.277,5,0.277,6,0.357,7,0.519,10,1.327,11,1.327,12,1.001,13,0.58,14,0.053,15,0.616,16,0.339,17,0.673,18,0.673,19,0.673,20,0.863,21,1.001,22,0.97,23,0.673,24,0.886,25,0.673,26,0.886,27,0.594,28,0.886,29,0.886,30,0.494,31,0.277,32,1.153,33,0.673,34,0.926,35,1.06,36,0.594,37,0.388,38,0.673,39,0.594,40,0.594,41,0.594,42,0.594,43,0.451,44,1.258,45,0.805,46,0.886,47,0.594,48,0.451,49,0.594,50,0.805,51,0.451,52,0.894,53,0.594,54,0.58,55,0.591,56,0.388,57,0.814,58,0.926,59,1.09,60,0.673,61,0.519,62,1.175,63,0.519,64,1.175,65,0.774,66,0.519,67,1.027,68,0.805,69,0.774,70,0.956,71,0.956,72,0.716,73,1.319,74,1.367,75,0.388,76,0.519,77,0.414,78,0.451,79,0.388,80,0.594,81,0.519,82,0.594,83,0.331,84,0.673,85,0.774,86,0.886,87,1.03,88,1.001,89,0.519,90,0.854,91,0.519,92,0.519,93,0.926,94,1.027,95,0.774,96,0.519,97,0.594,98,0.451,99,0.519,100,0.594,101,0.519,102,0.594,103,0.926,104,0.388,105,0.519,106,0.823,107,0.519,108,0.519,109,0.58,110,0.388,111,0.519,112,0.519,113,1.175,114,0.519,115,1.175,116,0.519,117,0.519,118,0.594,119,0.519,120,0.594,121,0.594,122,1.06,123,0.519,124,0.894,125,0.886,126,0.774,127,0.519,128,0.519,129,0.594,130,0.519,131,0.983,132,0.181,133,0.519,134,0.388,135,0.594,136,0.519,137,0.519,138,0.774,139,0.519,140,0.519,141,1.027,142,1.258,143,0.594,144,1.06,145,0.594,146,1.218,147,0.594,148,0.886,149,1.598,150,0.774,151,0.774,152,0.886,153,0.886,154,0.886,155,0.886,156,0.886,157,0.886,158,0.594,159,0.886,160,0.519,161,0.451,162,0.451,163,0.388,164,0.594,165,0.673,166,0.594,167,0.451,168,0.886,169,1.208,170,0.594,171,0.594,172,0.886,173,0.594,174,0.594,175,0.519,176,0.519,177,0.388,178,1.258,179,0.594,180,0.886,181,0.594,182,0.594,183,0.774,184,0.594,185,0.594,186,0.594,187,0.594,188,0.519,189,0.886,190,1.027,191,1.175,192,0.886,193,0.886,194,0.594,195,0.594,196,0.886,197,0.594,198,0.594,199,0.673,200,0.451,201,0.388,202,1.141,203,0.594,204,0.594,205,0.594,206,0.805,207,0.594,208,1.06,209,0.955,210,0.594,211,1.194,212,0.594,213,0.594,214,0.594,215,0.594,216,0.594,217,0.594,218,0.594,219,0.594,220,0.886,221,0.886,222,0.594,223,0.886,224,0.886,225,0.594,226,0.594,227,0.594,228,0.594,229,0.594,230,1.06,231,1.06,232,1.06,233,0.594,234,1.06,235,1.06,236,0.594,237,1.06,238,0.886,239,0.886,240,0.886,241,0.594,242,0.594,243,0.886,244,0.594,245,0.594,246,0.886,247,0.594,248,0.886,249,1.06,250,0.594,251,0.594,252,0.594,253,0.451,254,1.066,255,0.673,256,0.594,257,0.388,258,0.451,259,0.926,260,0.594,261,0.594,262,0.886,263,0.886,264,0.594,265,0.594,266,0.594,267,0.594,268,1.06,269,0.594,270,0.519,271,0.519,272,1.06,273,0.594,274,1.06,275,0.594,276,0.594,277,0.594,278,0.594,279,0.594,280,0.594,281,0.519,282,0.886,283,0.594,284,0.594,285,0.594,286,0.594,287,0.594,288,0.594,289,0.594,290,0.594,291,0.886,292,0.594,293,0.594,294,0.594,295,0.594,296,0.594,297,1.06,298,0.594,299,0.594,300,0.594,301,0.594,302,0.805,303,0.594,304,0.451,305,0.594,306,0.594,307,0.594,308,0.594,309,0.594,310,0.594,311,0.774,312,0.594,313,0.594,314,0.594,315,0.594,316,0.594,317,0.594,318,0.594,319,0.594,320,0.594,321,1.462,322,0.594,323,0.594,324,0.594,325,0.594,326,0.594,327,0.594,328,0.594,329,0.594,330,0.451,331,0.886,332,0.594,333,0.594,334,0.594,335,0.594,336,0.594,337,1.175,338,1.06,339,0.594,340,0.594,341,0.594,342,1.09,343,0.594,344,0.594,345,0.594,346,0.594,347,0.594,348,0.594,349,0.886,350,0.594,351,0.594,352,0.594,353,0.594,354,0.594,355,0.594,356,1.258,357,0.886,358,0.886,359,0.594,360,0.594,361,0.886,362,0.886,363,0.886,364,0.594,365,1.06,366,0.886,367,0.594,368,1.258,369,0.886,370,0.594,371,0.594,372,0.594,373,0.594,374,0.594,375,0.594,376,0.594,377,0.594,378,0.594,379,0.594,380,0.594,381,0.594,382,0.594,383,0.594,384,0.594,385,0.886,386,0.594,387,0.886,388,0.594,389,0.594,390,0.594,391,0.594,392,0.594,393,0.594,394,0.594,395,0.594,396,0.594,397,0.594,398,0.027,399,0.027]],["title/interfaces/DragPointerDownEvent.html",[0,0.024,61,0.732]],["body/interfaces/DragPointerDownEvent.html",[0,0.042,1,1.038,2,0.388,3,0.331,4,0.277,5,0.277,6,0.357,7,0.519,10,1.327,11,1.327,12,1.001,13,0.58,14,0.053,15,0.616,16,0.339,17,0.673,18,0.673,19,0.673,20,0.863,21,1.001,22,0.97,23,0.673,24,0.886,25,0.673,26,0.886,27,0.594,28,0.886,29,0.886,30,0.494,31,0.277,32,1.153,33,0.673,34,0.926,35,1.06,36,0.594,37,0.388,38,0.673,39,0.594,40,0.594,41,0.594,42,0.594,43,0.451,44,1.258,45,0.805,46,0.886,47,0.594,48,0.451,49,0.594,50,0.805,51,0.451,52,0.894,53,0.594,54,0.58,55,0.591,56,0.388,57,0.814,58,0.926,59,1.09,60,0.673,61,0.774,62,1.175,63,0.519,64,1.175,65,0.519,66,0.519,67,1.027,68,0.805,69,0.774,70,0.956,71,0.956,72,0.716,73,1.319,74,1.367,75,0.388,76,0.519,77,0.414,78,0.451,79,0.388,80,0.594,81,0.519,82,0.594,83,0.331,84,0.673,85,0.774,86,0.886,87,1.03,88,1.001,89,0.519,90,0.854,91,0.519,92,0.519,93,0.926,94,1.027,95,0.774,96,0.519,97,0.594,98,0.451,99,0.519,100,0.594,101,0.519,102,0.594,103,0.926,104,0.388,105,0.519,106,0.823,107,0.519,108,0.519,109,0.58,110,0.388,111,0.519,112,0.519,113,1.175,114,0.519,115,1.175,116,0.519,117,0.519,118,0.594,119,0.519,120,0.594,121,0.594,122,1.06,123,0.519,124,0.894,125,0.886,126,0.774,127,0.519,128,0.519,129,0.594,130,0.519,131,0.983,132,0.181,133,0.519,134,0.388,135,0.594,136,0.519,137,0.519,138,0.774,139,0.519,140,0.519,141,1.027,142,1.258,143,0.594,144,1.06,145,0.594,146,1.218,147,0.594,148,0.886,149,1.598,150,0.774,151,0.774,152,0.886,153,0.886,154,0.886,155,0.886,156,0.886,157,0.886,158,0.594,159,0.886,160,0.519,161,0.451,162,0.451,163,0.388,164,0.594,165,0.673,166,0.594,167,0.451,168,0.886,169,1.208,170,0.594,171,0.594,172,0.886,173,0.594,174,0.594,175,0.519,176,0.519,177,0.388,178,1.258,179,0.594,180,0.886,181,0.594,182,0.594,183,0.774,184,0.594,185,0.594,186,0.594,187,0.594,188,0.519,189,0.886,190,1.027,191,1.175,192,0.886,193,0.886,194,0.594,195,0.594,196,0.886,197,0.594,198,0.594,199,0.673,200,0.451,201,0.388,202,1.141,203,0.594,204,0.594,205,0.594,206,0.805,207,0.594,208,1.06,209,0.955,210,0.594,211,1.194,212,0.594,213,0.594,214,0.594,215,0.594,216,0.594,217,0.594,218,0.594,219,0.594,220,0.886,221,0.886,222,0.594,223,0.886,224,0.886,225,0.594,226,0.594,227,0.594,228,0.594,229,0.594,230,1.06,231,1.06,232,1.06,233,0.594,234,1.06,235,1.06,236,0.594,237,1.06,238,0.886,239,0.886,240,0.886,241,0.594,242,0.594,243,0.886,244,0.594,245,0.594,246,0.886,247,0.594,248,0.886,249,1.06,250,0.594,251,0.594,252,0.594,253,0.451,254,1.066,255,0.673,256,0.594,257,0.388,258,0.451,259,0.926,260,0.594,261,0.594,262,0.886,263,0.886,264,0.594,265,0.594,266,0.594,267,0.594,268,1.06,269,0.594,270,0.519,271,0.519,272,1.06,273,0.594,274,1.06,275,0.594,276,0.594,277,0.594,278,0.594,279,0.594,280,0.594,281,0.519,282,0.886,283,0.594,284,0.594,285,0.594,286,0.594,287,0.594,288,0.594,289,0.594,290,0.594,291,0.886,292,0.594,293,0.594,294,0.594,295,0.594,296,0.594,297,1.06,298,0.594,299,0.594,300,0.594,301,0.594,302,0.805,303,0.594,304,0.451,305,0.594,306,0.594,307,0.594,308,0.594,309,0.594,310,0.594,311,0.774,312,0.594,313,0.594,314,0.594,315,0.594,316,0.594,317,0.594,318,0.594,319,0.594,320,0.594,321,1.462,322,0.594,323,0.594,324,0.594,325,0.594,326,0.594,327,0.594,328,0.594,329,0.594,330,0.451,331,0.886,332,0.594,333,0.594,334,0.594,335,0.594,336,0.594,337,1.175,338,1.06,339,0.594,340,0.594,341,0.594,342,1.09,343,0.594,344,0.594,345,0.594,346,0.594,347,0.594,348,0.594,349,0.886,350,0.594,351,0.594,352,0.594,353,0.594,354,0.594,355,0.594,356,1.258,357,0.886,358,0.886,359,0.594,360,0.594,361,0.886,362,0.886,363,0.886,364,0.594,365,1.06,366,0.886,367,0.594,368,1.258,369,0.886,370,0.594,371,0.594,372,0.594,373,0.594,374,0.594,375,0.594,376,0.594,377,0.594,378,0.594,379,0.594,380,0.594,381,0.594,382,0.594,383,0.594,384,0.594,385,0.886,386,0.594,387,0.886,388,0.594,389,0.594,390,0.594,391,0.594,392,0.594,393,0.594,394,0.594,395,0.594,396,0.594,397,0.594,398,0.027,399,0.027]],["title/interfaces/DragStartEvent.html",[0,0.024,63,0.732]],["body/interfaces/DragStartEvent.html",[0,0.042,1,1,2,0.387,3,0.33,4,0.276,5,0.276,6,0.357,7,0.517,8,0.33,9,1.008,10,1.326,11,1.326,12,1,13,0.692,14,0.053,15,0.615,16,0.338,17,0.671,18,0.671,19,0.671,20,0.862,21,1,22,0.97,23,0.671,24,0.884,25,0.671,26,0.884,27,0.592,28,0.884,29,0.884,30,0.492,31,0.276,32,1.151,33,0.671,34,0.925,35,1.256,36,0.592,37,0.387,38,0.671,39,0.592,40,0.592,41,0.592,42,0.592,43,0.449,44,1.256,45,0.803,46,0.884,47,0.592,48,0.449,49,0.592,50,0.803,51,0.449,52,0.893,53,0.592,54,0.578,55,0.589,56,0.387,57,0.814,58,0.925,59,1.089,60,0.671,61,0.517,62,1.058,63,0.772,64,1.365,65,0.517,66,0.517,67,1.025,68,0.803,69,0.772,70,0.955,71,0.955,72,0.715,73,1.317,74,1.365,75,0.387,76,0.517,77,0.413,78,0.449,79,0.387,80,0.592,81,0.517,82,0.592,83,0.33,84,0.671,85,0.772,86,0.884,87,1.03,88,1,89,0.517,90,0.853,91,0.517,92,0.517,93,0.925,94,1.025,95,0.772,96,0.517,97,0.592,98,0.449,99,0.517,100,0.592,101,0.517,102,0.592,103,0.925,104,0.387,105,0.517,106,0.821,107,0.517,108,0.517,109,0.578,110,0.387,111,0.517,112,0.517,113,1.174,114,0.517,115,1.174,116,0.517,117,0.517,118,0.592,119,0.517,120,0.592,121,0.592,122,1.058,123,0.517,124,0.893,125,0.884,126,0.772,127,0.517,128,0.517,129,0.592,130,0.517,131,0.982,132,0.18,133,0.517,134,0.387,135,0.592,136,0.517,137,0.517,138,0.772,139,0.517,140,0.517,141,1.025,142,1.256,143,0.592,144,1.058,145,0.592,146,1.217,147,0.592,148,0.884,149,1.597,150,0.772,151,0.772,152,0.884,153,0.884,154,0.884,155,0.884,156,0.884,157,0.884,158,0.592,159,0.884,160,0.517,161,0.449,162,0.449,163,0.387,164,0.592,165,0.671,166,0.592,167,0.449,168,0.884,169,1.207,170,0.592,171,0.592,172,0.884,173,0.592,174,0.592,175,0.517,176,0.517,177,0.387,178,1.256,179,0.592,180,0.884,181,0.592,182,0.592,183,0.772,184,0.592,185,0.592,186,0.592,187,0.592,188,0.517,189,0.884,190,1.025,191,1.174,192,0.884,193,0.884,194,0.592,195,0.592,196,0.884,197,0.592,198,0.592,199,0.671,200,0.449,201,0.387,202,1.14,203,0.592,204,0.592,205,0.592,206,0.803,207,0.592,208,1.058,209,0.953,210,0.592,211,1.193,212,0.592,213,0.592,214,0.592,215,0.592,216,0.592,217,0.592,218,0.592,219,0.592,220,0.884,221,0.884,222,0.592,223,0.884,224,0.884,225,0.592,226,0.592,227,0.592,228,0.592,229,0.592,230,1.058,231,1.058,232,1.058,233,0.592,234,1.058,235,1.058,236,0.592,237,1.058,238,0.884,239,0.884,240,0.884,241,0.592,242,0.592,243,0.884,244,0.592,245,0.592,246,0.884,247,0.592,248,0.884,249,1.058,250,0.592,251,0.592,252,0.592,253,0.449,254,1.065,255,0.671,256,0.592,257,0.387,258,0.449,259,0.925,260,0.592,261,0.592,262,0.884,263,0.884,264,0.592,265,0.592,266,0.592,267,0.592,268,1.058,269,0.592,270,0.517,271,0.517,272,1.058,273,0.592,274,1.058,275,0.592,276,0.592,277,0.592,278,0.592,279,0.592,280,0.592,281,0.517,282,0.884,283,0.592,284,0.592,285,0.592,286,0.592,287,0.592,288,0.592,289,0.592,290,0.592,291,0.884,292,0.592,293,0.592,294,0.592,295,0.592,296,0.592,297,1.058,298,0.592,299,0.592,300,0.592,301,0.592,302,0.803,303,0.592,304,0.449,305,0.592,306,0.592,307,0.592,308,0.592,309,0.592,310,0.592,311,0.772,312,0.592,313,0.592,314,0.592,315,0.592,316,0.592,317,0.592,318,0.592,319,0.592,320,0.592,321,1.461,322,0.592,323,0.592,324,0.592,325,0.592,326,0.592,327,0.592,328,0.592,329,0.592,330,0.449,331,0.884,332,0.592,333,0.592,334,0.592,335,0.592,336,0.592,337,1.174,338,1.058,339,0.592,340,0.592,341,0.592,342,1.089,343,0.592,344,0.592,345,0.592,346,0.592,347,0.592,348,0.592,349,0.884,350,0.592,351,0.592,352,0.592,353,0.592,354,0.592,355,0.592,356,1.256,357,0.884,358,0.884,359,0.592,360,0.592,361,0.884,362,0.884,363,0.884,364,0.592,365,1.058,366,0.884,367,0.592,368,1.256,369,0.884,370,0.592,371,0.592,372,0.592,373,0.592,374,0.592,375,0.592,376,0.592,377,0.592,378,0.592,379,0.592,380,0.592,381,0.592,382,0.592,383,0.592,384,0.592,385,0.884,386,0.592,387,0.884,388,0.592,389,0.592,390,0.592,391,0.592,392,0.592,393,0.592,394,0.592,395,0.592,396,0.592,397,0.592,398,0.027,399,0.027]],["title/directives/DraggableDirective.html",[16,0.321,78,0.636]],["body/directives/DraggableDirective.html",[0,0.039,1,0.964,2,0.351,3,0.299,4,0.251,5,0.714,6,0.477,7,0.47,8,0.299,10,1.326,11,1.326,12,0.964,13,1.008,14,0.053,15,0.593,16,0.382,17,0.757,18,0.624,19,0.624,20,0.891,21,1.1,22,0.973,23,0.757,24,0.998,25,0.624,26,0.822,27,0.537,28,0.998,29,0.822,30,0.458,31,0.251,32,1.109,33,0.624,34,0.872,35,0.998,36,0.537,37,0.351,38,0.624,39,0.537,40,0.537,41,0.537,42,0.537,43,0.408,44,1.204,45,0.757,46,0.822,47,0.537,48,0.408,49,0.537,50,0.757,51,0.408,52,0.864,53,0.537,54,0.537,55,0.556,56,0.351,57,0.794,58,1.109,59,1.1,60,0.757,61,0.47,62,0.998,63,0.47,64,1.117,65,0.47,66,0.47,67,0.976,68,0.964,69,0.718,70,0.932,71,0.932,72,0.736,73,1.27,74,1.321,75,0.537,76,0.718,77,0.466,78,0.624,79,0.537,80,0.822,81,0.718,82,0.822,83,0.458,84,0.848,85,0.976,86,1.117,87,1.071,88,1.082,89,0.718,90,0.9,91,0.718,92,0.872,93,1.109,94,1.191,95,1.052,96,0.718,97,0.998,98,0.624,99,0.718,100,0.822,101,0.718,102,0.822,103,0.976,104,0.537,105,0.872,106,0.864,107,0.718,108,0.718,109,0.731,110,0.653,111,0.718,112,1.154,113,1.204,114,0.872,115,1.204,116,0.718,117,0.718,118,0.822,119,0.718,120,0.822,121,0.822,122,1.117,123,0.872,124,0.983,125,1.117,126,0.976,127,0.718,128,0.718,129,0.822,130,0.872,131,0.961,132,0.25,133,0.718,134,0.537,135,0.822,136,0.718,137,0.718,138,0.976,139,0.718,140,0.872,141,1.109,142,1.204,143,0.537,144,0.998,145,0.537,146,1.202,147,0.537,148,0.822,149,1.576,150,0.718,151,0.718,152,0.822,153,0.822,154,0.822,155,0.822,156,0.822,157,0.822,158,0.537,159,0.822,160,0.47,161,0.408,162,0.408,163,0.351,164,0.537,165,0.624,166,0.537,167,0.408,168,0.822,169,1.191,170,0.537,171,0.537,172,0.822,173,0.537,174,0.537,175,0.47,176,0.47,177,0.351,178,1.204,179,0.537,180,0.822,181,0.537,182,0.537,183,0.718,184,0.537,185,0.537,186,0.537,187,0.537,188,0.47,189,0.822,190,0.976,191,1.117,192,0.822,193,0.822,194,0.537,195,0.537,196,0.822,197,0.537,198,0.537,199,0.624,200,0.408,201,0.351,202,1.116,203,0.537,204,0.537,205,0.537,206,0.757,207,0.537,208,0.998,209,0.914,210,0.537,211,1.154,212,0.537,213,0.537,214,0.537,215,0.537,216,0.537,217,0.537,218,0.537,219,0.537,220,0.822,221,0.822,222,0.537,223,0.822,224,0.822,225,0.537,226,0.537,227,0.537,228,0.537,229,0.537,230,0.998,231,0.998,232,0.998,233,0.537,234,0.998,235,0.998,236,0.537,237,0.998,238,0.822,239,0.822,240,0.822,241,0.537,242,0.537,243,0.822,244,0.537,245,0.537,246,0.822,247,0.537,248,0.822,249,0.998,250,0.537,251,0.537,252,0.537,253,0.408,254,1.034,255,0.624,256,0.537,257,0.351,258,0.408,259,0.872,260,0.537,261,0.537,262,0.822,263,0.822,264,0.537,265,0.537,266,0.537,267,0.537,268,0.998,269,0.537,270,0.47,271,0.47,272,0.998,273,0.537,274,0.998,275,0.537,276,0.537,277,0.537,278,0.537,279,0.537,280,0.537,281,0.47,282,0.822,283,0.537,284,0.537,285,0.537,286,0.537,287,0.537,288,0.537,289,0.537,290,0.537,291,0.822,292,0.537,293,0.537,294,0.537,295,0.537,296,0.537,297,0.998,298,0.537,299,0.537,300,0.537,301,0.537,302,0.757,303,0.537,304,0.408,305,0.537,306,0.537,307,0.537,308,0.537,309,0.537,310,0.537,311,1.154,312,0.537,313,0.537,314,0.537,315,0.537,316,0.537,317,0.537,318,0.537,319,0.537,320,0.537,321,1.425,322,0.537,323,0.537,324,0.537,325,0.537,326,0.537,327,0.537,328,0.537,329,0.537,330,0.408,331,0.822,332,0.537,333,0.537,334,0.537,335,0.537,336,0.537,337,1.117,338,0.998,339,0.537,340,0.537,341,0.537,342,1.06,343,0.537,344,0.537,345,0.537,346,0.537,347,0.537,348,0.537,349,0.822,350,0.537,351,0.537,352,0.537,353,0.537,354,0.537,355,0.537,356,1.204,357,0.822,358,0.822,359,0.537,360,0.537,361,0.822,362,0.822,363,0.822,364,0.537,365,0.998,366,0.822,367,0.537,368,1.204,369,0.822,370,0.537,371,0.537,372,0.537,373,0.537,374,0.537,375,0.537,376,0.537,377,0.537,378,0.537,379,0.537,380,0.537,381,0.537,382,0.537,383,0.537,384,0.537,385,0.822,386,0.537,387,0.822,388,0.537,389,0.537,390,0.537,391,0.537,392,0.537,393,0.537,394,0.537,395,0.537,396,0.537,397,0.537,398,0.025,399,0.025,409,1.442,410,4.072,411,1.788,412,1.788,413,1.788,414,1.788,415,1.788,416,1.788,417,1.788,418,1.788,419,1.788,420,1.788,421,1.788,422,1.788,423,1.788,424,1.788,425,1.788]],["title/interfaces/DropEvent.html",[0,0.024,426,2.248]],["body/interfaces/DropEvent.html",[0,0.028,2,0.623,3,0.531,4,0.445,5,0.445,6,0.481,8,0.531,9,1.406,12,0.936,13,0.623,14,0.053,15,0.699,16,0.472,17,0.936,18,0.936,19,0.936,20,1.002,21,1.136,22,0.894,23,0.936,25,0.936,30,0.687,31,0.445,37,0.806,38,0.936,43,0.936,45,0.723,48,0.723,50,1.037,51,0.723,54,0.806,55,0.687,56,0.623,57,0.531,59,1.037,70,1.002,71,0.979,72,0.445,75,0.623,77,0.445,79,0.623,83,0.687,84,1.223,87,1.073,88,1.037,90,0.761,98,0.936,106,0.806,109,0.623,110,0.623,124,0.945,131,0.945,132,0.29,134,0.623,146,1.136,161,0.723,162,0.723,163,0.623,165,0.723,167,0.723,169,1.136,199,0.936,200,0.723,201,0.623,202,1.037,206,0.723,209,1.097,253,0.936,254,1.136,255,0.936,257,0.806,258,0.723,302,0.936,304,1.037,330,0.723,342,0.723,398,0.037,399,0.037,405,1.851,426,2.557,427,2.153,428,3.666,429,3.307,430,2.557,431,1.61,432,3.087,433,4.015,434,2.557,435,2.557,436,2.153,437,2.785,438,2.785,439,2.153,440,2.557,441,3.666,442,2.557,443,2.557,444,2.557,445,2.557,446,2.557,447,2.557,448,2.153,449,2.153,450,2.557,451,3.307,452,2.557,453,2.557,454,3.307,455,2.557,456,3.307,457,3.666,458,4.112,459,2.557,460,3.307,461,3.666,462,2.557,463,3.666,464,3.666,465,2.557,466,3.877,467,2.557,468,2.153,469,2.557,470,2.153,471,2.557,472,2.557,473,2.557,474,3.666,475,3.666,476,2.557,477,2.557,478,2.557,479,2.557,480,2.557,481,2.557,482,2.557,483,2.557,484,2.153,485,2.557,486,2.557]],["title/directives/DroppableDirective.html",[16,0.321,405,1.627]],["body/directives/DroppableDirective.html",[2,0.573,3,0.488,4,0.409,5,0.734,6,0.507,8,0.488,9,1.33,12,0.885,13,1.015,14,0.053,15,0.68,16,0.502,17,0.995,18,1.061,19,1.061,20,1.015,21,1.193,22,0.952,23,0.995,25,1.061,30,0.73,31,0.409,37,0.763,38,0.885,43,0.885,45,0.665,48,0.665,50,1.16,51,0.665,54,0.914,55,0.65,56,0.573,57,0.488,59,0.995,70,0.979,71,0.952,72,0.68,75,0.763,77,0.409,79,0.763,83,0.811,84,1.16,87,1.099,88,0.995,90,0.811,98,0.885,106,0.914,109,0.763,110,0.857,124,1.015,131,0.914,132,0.355,134,0.763,146,1.105,161,0.885,162,0.995,163,0.857,165,0.995,167,0.665,169,1.105,199,0.885,200,0.665,201,0.573,202,0.995,206,0.665,209,1.061,253,0.885,254,1.105,255,0.885,257,0.763,258,0.665,302,0.885,304,0.995,330,0.665,342,0.665,398,0.035,399,0.035,405,2.265,409,2.349,410,4.165,427,1.978,428,2.349,429,3.751,430,2.349,431,1.479,432,2.962,433,3.906,434,2.349,435,2.349,436,2.634,437,3.158,438,3.158,439,2.962,440,3.129,441,3.906,442,3.518,443,3.129,444,3.518,445,3.518,446,2.349,447,2.349,448,2.634,449,1.978,450,3.751,451,3.129,452,2.349,453,2.349,454,3.129,455,2.349,456,3.129,457,3.518,458,4.017,459,2.349,460,3.129,461,3.518,462,2.349,463,3.518,464,3.518,465,2.349,466,3.751,467,2.349,468,1.978,469,2.349,470,1.978,471,2.349,472,2.349,473,2.349,474,3.518,475,3.518,476,2.349,477,2.349,478,2.349,479,2.349,480,2.349,481,2.349,482,2.349,483,2.349,484,1.978,485,2.349,486,2.349,487,2.913,488,3.88,489,2.349,490,2.913,491,2.913,492,2.913,493,2.913,494,2.913,495,2.913]],["title/interfaces/PointerEvent.html",[0,0.024,69,0.732]],["body/interfaces/PointerEvent.html",[0,0.041,1,0.997,2,0.384,3,0.327,4,0.274,5,0.274,6,0.355,7,0.513,8,0.327,9,1.002,10,1.324,11,1.324,12,1.107,13,0.819,14,0.053,15,0.613,16,0.337,17,0.667,18,0.667,19,0.667,20,0.859,21,0.997,22,0.968,23,0.667,24,0.879,25,0.667,26,0.879,27,0.587,28,0.879,29,0.879,30,0.49,31,0.274,32,1.148,33,0.667,34,0.92,35,1.053,36,0.587,37,0.384,38,0.667,39,0.587,40,0.587,41,0.587,42,0.587,43,0.446,44,1.252,45,0.8,46,0.879,47,0.587,48,0.446,49,0.587,50,0.8,51,0.446,52,0.891,53,0.587,54,0.575,55,0.587,56,0.384,57,0.812,58,0.92,59,1.087,60,0.667,61,0.513,62,1.053,63,0.513,64,1.169,65,0.513,66,0.513,67,1.022,68,0.8,69,0.92,70,0.991,71,0.991,72,0.73,73,1.4,74,1.432,75,0.384,76,0.513,77,0.41,78,0.446,79,0.384,80,0.587,81,0.513,82,0.587,83,0.327,84,0.667,85,0.768,86,0.879,87,1.029,88,0.997,89,0.513,90,0.852,91,0.513,92,0.513,93,0.92,94,1.022,95,0.768,96,0.513,97,0.587,98,0.446,99,0.513,100,0.587,101,0.513,102,0.587,103,0.92,104,0.384,105,0.513,106,0.819,107,0.513,108,0.513,109,0.575,110,0.384,111,0.513,112,0.513,113,1.169,114,0.513,115,1.169,116,0.513,117,0.513,118,0.587,119,0.513,120,0.587,121,0.587,122,1.053,123,0.513,124,0.891,125,0.879,126,0.768,127,0.513,128,0.513,129,0.587,130,0.513,131,0.98,132,0.179,133,0.513,134,0.384,135,0.587,136,0.513,137,0.513,138,0.768,139,0.513,140,0.513,141,1.022,142,1.252,143,0.587,144,1.053,145,0.587,146,1.216,147,0.587,148,0.879,149,1.595,150,0.768,151,0.768,152,0.879,153,0.879,154,0.879,155,0.879,156,0.879,157,0.879,158,0.587,159,0.879,160,0.513,161,0.446,162,0.446,163,0.384,164,0.587,165,0.667,166,0.587,167,0.446,168,0.879,169,1.206,170,0.587,171,0.587,172,0.879,173,0.587,174,0.587,175,0.513,176,0.513,177,0.384,178,1.252,179,0.587,180,0.879,181,0.587,182,0.587,183,0.768,184,0.587,185,0.587,186,0.587,187,0.587,188,0.513,189,0.879,190,1.022,191,1.169,192,0.879,193,0.879,194,0.587,195,0.587,196,0.879,197,0.587,198,0.587,199,0.667,200,0.446,201,0.384,202,1.138,203,0.587,204,0.587,205,0.587,206,0.8,207,0.587,208,1.053,209,0.95,210,0.587,211,1.19,212,0.587,213,0.587,214,0.587,215,0.587,216,0.587,217,0.587,218,0.587,219,0.587,220,0.879,221,0.879,222,0.587,223,0.879,224,0.879,225,0.587,226,0.587,227,0.587,228,0.587,229,0.587,230,1.053,231,1.053,232,1.053,233,0.587,234,1.053,235,1.053,236,0.587,237,1.053,238,0.879,239,0.879,240,0.879,241,0.587,242,0.587,243,0.879,244,0.587,245,0.587,246,0.879,247,0.587,248,0.879,249,1.053,250,0.587,251,0.587,252,0.587,253,0.446,254,1.063,255,0.667,256,0.587,257,0.384,258,0.446,259,0.92,260,0.587,261,0.587,262,0.879,263,0.879,264,0.587,265,0.587,266,0.587,267,0.587,268,1.053,269,0.587,270,0.513,271,0.513,272,1.053,273,0.587,274,1.053,275,0.587,276,0.587,277,0.587,278,0.587,279,0.587,280,0.587,281,0.513,282,0.879,283,0.587,284,0.587,285,0.587,286,0.587,287,0.587,288,0.587,289,0.587,290,0.587,291,0.879,292,0.587,293,0.587,294,0.587,295,0.587,296,0.587,297,1.053,298,0.587,299,0.587,300,0.587,301,0.587,302,0.8,303,0.587,304,0.446,305,0.587,306,0.587,307,0.587,308,0.587,309,0.587,310,0.587,311,0.768,312,0.587,313,0.587,314,0.587,315,0.587,316,0.587,317,0.587,318,0.587,319,0.587,320,0.587,321,1.458,322,0.587,323,0.587,324,0.587,325,0.587,326,0.587,327,0.587,328,0.587,329,0.587,330,0.446,331,0.879,332,0.587,333,0.587,334,0.587,335,0.587,336,0.587,337,1.169,338,1.053,339,0.587,340,0.587,341,0.587,342,1.087,343,0.587,344,0.587,345,0.587,346,0.587,347,0.587,348,0.587,349,0.879,350,0.587,351,0.587,352,0.587,353,0.587,354,0.587,355,0.587,356,1.252,357,0.879,358,0.879,359,0.587,360,0.587,361,0.879,362,0.879,363,0.879,364,0.587,365,1.053,366,0.879,367,0.587,368,1.252,369,0.879,370,0.587,371,0.587,372,0.587,373,0.587,374,0.587,375,0.587,376,0.587,377,0.587,378,0.587,379,0.587,380,0.587,381,0.587,382,0.587,383,0.587,384,0.587,385,0.879,386,0.587,387,0.879,388,0.587,389,0.587,390,0.587,391,0.587,392,0.587,393,0.587,394,0.587,395,0.587,396,0.587,397,0.587,398,0.027,399,0.027]],["title/interfaces/SnapGrid.html",[0,0.024,60,0.636]],["body/interfaces/SnapGrid.html",[0,0.042,1,0.998,2,0.385,3,0.328,4,0.275,5,0.275,6,0.356,7,0.515,8,0.328,9,1.005,10,1.358,11,1.358,12,1.108,13,0.766,14,0.053,15,0.614,16,0.337,17,0.669,18,0.669,19,0.669,20,0.86,21,0.998,22,0.969,23,0.669,24,0.881,25,0.669,26,0.881,27,0.589,28,0.881,29,0.881,30,0.733,31,0.275,32,1.149,33,0.669,34,0.922,35,1.055,36,0.589,37,0.385,38,0.669,39,0.589,40,0.589,41,0.589,42,0.589,43,0.447,44,1.253,45,0.801,46,0.881,47,0.589,48,0.447,49,0.589,50,0.801,51,0.447,52,0.892,53,0.589,54,0.576,55,0.588,56,0.385,57,0.813,58,0.922,59,1.088,60,0.801,61,0.515,62,1.055,63,0.515,64,1.171,65,0.515,66,0.515,67,1.023,68,0.801,69,0.77,70,0.954,71,0.954,72,0.715,73,1.315,74,1.363,75,0.385,76,0.515,77,0.411,78,0.447,79,0.385,80,0.589,81,0.515,82,0.589,83,0.328,84,0.669,85,0.77,86,0.881,87,1.029,88,0.998,89,0.515,90,0.853,91,0.515,92,0.515,93,0.922,94,1.023,95,0.77,96,0.515,97,0.589,98,0.447,99,0.515,100,0.589,101,0.515,102,0.589,103,0.922,104,0.385,105,0.515,106,0.82,107,0.515,108,0.515,109,0.576,110,0.385,111,0.515,112,0.515,113,1.171,114,0.515,115,1.171,116,0.515,117,0.515,118,0.589,119,0.515,120,0.589,121,0.589,122,1.055,123,0.515,124,0.892,125,0.881,126,0.77,127,0.515,128,0.515,129,0.589,130,0.515,131,0.981,132,0.179,133,0.515,134,0.385,135,0.589,136,0.515,137,0.515,138,0.77,139,0.515,140,0.515,141,1.023,142,1.253,143,0.589,144,1.055,145,0.589,146,1.216,147,0.589,148,0.881,149,1.596,150,0.77,151,0.77,152,0.881,153,0.881,154,0.881,155,0.881,156,0.881,157,0.881,158,0.589,159,0.881,160,0.515,161,0.447,162,0.447,163,0.385,164,0.589,165,0.669,166,0.589,167,0.447,168,0.881,169,1.206,170,0.589,171,0.589,172,0.881,173,0.589,174,0.589,175,0.515,176,0.515,177,0.385,178,1.253,179,0.589,180,0.881,181,0.589,182,0.589,183,0.77,184,0.589,185,0.589,186,0.589,187,0.589,188,0.515,189,0.881,190,1.023,191,1.171,192,0.881,193,0.881,194,0.589,195,0.589,196,0.881,197,0.589,198,0.589,199,0.669,200,0.447,201,0.385,202,1.139,203,0.589,204,0.589,205,0.589,206,0.801,207,0.589,208,1.055,209,0.951,210,0.589,211,1.191,212,0.589,213,0.589,214,0.589,215,0.589,216,0.589,217,0.589,218,0.589,219,0.589,220,0.881,221,0.881,222,0.589,223,0.881,224,0.881,225,0.589,226,0.589,227,0.589,228,0.589,229,0.589,230,1.055,231,1.055,232,1.055,233,0.589,234,1.055,235,1.055,236,0.589,237,1.055,238,0.881,239,0.881,240,0.881,241,0.589,242,0.589,243,0.881,244,0.589,245,0.589,246,0.881,247,0.589,248,0.881,249,1.055,250,0.589,251,0.589,252,0.589,253,0.447,254,1.064,255,0.669,256,0.589,257,0.385,258,0.447,259,0.922,260,0.589,261,0.589,262,0.881,263,0.881,264,0.589,265,0.589,266,0.589,267,0.589,268,1.055,269,0.589,270,0.515,271,0.515,272,1.055,273,0.589,274,1.055,275,0.589,276,0.589,277,0.589,278,0.589,279,0.589,280,0.589,281,0.515,282,0.881,283,0.589,284,0.589,285,0.589,286,0.589,287,0.589,288,0.589,289,0.589,290,0.589,291,0.881,292,0.589,293,0.589,294,0.589,295,0.589,296,0.589,297,1.055,298,0.589,299,0.589,300,0.589,301,0.589,302,0.801,303,0.589,304,0.447,305,0.589,306,0.589,307,0.589,308,0.589,309,0.589,310,0.589,311,0.77,312,0.589,313,0.589,314,0.589,315,0.589,316,0.589,317,0.589,318,0.589,319,0.589,320,0.589,321,1.459,322,0.589,323,0.589,324,0.589,325,0.589,326,0.589,327,0.589,328,0.589,329,0.589,330,0.447,331,0.881,332,0.589,333,0.589,334,0.589,335,0.589,336,0.589,337,1.171,338,1.055,339,0.589,340,0.589,341,0.589,342,1.088,343,0.589,344,0.589,345,0.589,346,0.589,347,0.589,348,0.589,349,0.881,350,0.589,351,0.589,352,0.589,353,0.589,354,0.589,355,0.589,356,1.253,357,0.881,358,0.881,359,0.589,360,0.589,361,0.881,362,0.881,363,0.881,364,0.589,365,1.055,366,0.881,367,0.589,368,1.253,369,0.881,370,0.589,371,0.589,372,0.589,373,0.589,374,0.589,375,0.589,376,0.589,377,0.589,378,0.589,379,0.589,380,0.589,381,0.589,382,0.589,383,0.589,384,0.589,385,0.881,386,0.589,387,0.881,388,0.589,389,0.589,390,0.589,391,0.589,392,0.589,393,0.589,394,0.589,395,0.589,396,0.589,397,0.589,398,0.027,399,0.027]],["title/changelog.html",[132,0.214,177,0.461,496,2.347]],["body/changelog.html",[0,0.021,1,0.547,4,0.337,6,0.507,8,0.568,10,0.63,11,0.63,14,0.036,15,0.476,16,0.453,20,0.775,22,0.775,30,0.808,33,0.775,37,0.842,52,0.472,55,0.808,57,0.402,60,0.978,67,0.892,68,0.899,72,0.773,76,0.63,77,0.553,79,0.667,83,0.84,85,0.63,87,1.086,89,0.892,90,0.942,91,0.892,92,0.892,93,0.63,94,1.295,95,0.63,96,1.035,99,1.351,101,1.125,103,1.268,104,0.969,105,0.892,107,1.035,108,0.63,109,0.889,110,0.667,111,0.63,112,1.125,114,0.63,116,0.63,119,0.63,123,0.63,124,0.842,126,0.892,127,0.892,128,0.63,130,0.63,131,0.667,132,0.31,133,0.63,134,0.949,136,0.63,138,0.892,139,1.125,140,0.63,141,1.125,150,0.63,151,0.63,160,0.892,163,0.472,175,0.892,176,0.892,183,1.125,188,0.63,190,0.892,201,0.775,211,0.63,259,0.63,270,1.035,271,1.413,281,0.63,311,0.63,398,0.031,399,0.031,400,1.508,401,2.175,436,1.628,437,1.628,438,1.628,439,1.628,449,1.628,468,1.628,470,1.628,484,2.305,497,5.234,498,2.399,499,2.399,500,2.399,501,2.399,502,2.399,503,2.399,504,2.399,505,3.177,506,2.399,507,3.395,508,5.332,509,3.395,510,2.399,511,2.399,512,3.94,513,2.399,514,3.395,515,2.399,516,5.402,517,2.399,518,3.94,519,5.142,520,2.399,521,3.395,522,2.399,523,2.399,524,2.399,525,2.399,526,2.399,527,3.395,528,2.399,529,4.521,530,2.399,531,3.94,532,4.694,533,3.976,534,1.934,535,1.934,536,2.399,537,3.395,538,2.399,539,2.399,540,3.395,541,2.399,542,2.399,543,3.94,544,2.399,545,2.399,546,2.399,547,2.399,548,2.399,549,2.399,550,2.399,551,3.395,552,2.738,553,3.395,554,3.395,555,2.399,556,2.399,557,2.399,558,2.399,559,2.399,560,2.399,561,4.694,562,2.399,563,2.399,564,2.399,565,2.399,566,2.399,567,3.395,568,3.395,569,2.399,570,2.399,571,2.399,572,5.142,573,5.191,574,2.399,575,2.399,576,2.399,577,2.399,578,2.399,579,2.399,580,2.399,581,3.395,582,2.399,583,3.94,584,2.399,585,1.934,586,2.399,587,2.399,588,2.399,589,3.395,590,4.284,591,2.399,592,3.94,593,3.94,594,2.399,595,4.284,596,3.177,597,2.399,598,2.399,599,2.399,600,2.399,601,2.399,602,2.399,603,2.399,604,4.93,605,5.084,606,3.94,607,2.399,608,2.399,609,3.94,610,3.395,611,2.399,612,2.399,613,2.399,614,2.399,615,2.399,616,3.395,617,2.399,618,4.284,619,1.934,620,2.399,621,3.395,622,2.399,623,3.395,624,3.395,625,2.399,626,2.399,627,2.399,628,2.399,629,2.399,630,4.284,631,4.284,632,4.147,633,4.284,634,2.399,635,2.399,636,4.284,637,4.284,638,3.177,639,2.399,640,5.142,641,5.142,642,2.399,643,3.395,644,2.399,645,3.94,646,2.399,647,4.284,648,2.399,649,2.399,650,3.395,651,2.399,652,2.399,653,2.399,654,2.399,655,2.399,656,2.399,657,2.399,658,2.399,659,2.399,660,2.399,661,2.399,662,2.399,663,2.399,664,2.399,665,2.399,666,2.399,667,2.399,668,2.399,669,2.399,670,2.399,671,4.284,672,2.738,673,2.3,674,2.399,675,2.399,676,2.399,677,2.399,678,2.399,679,3.94,680,2.399,681,2.399,682,2.399,683,4.284,684,2.399,685,2.399,686,2.399,687,2.399,688,4.521,689,2.399,690,3.395,691,3.94,692,2.399,693,2.399,694,2.399,695,2.399,696,2.399,697,3.395,698,2.399,699,2.399,700,3.395,701,2.399,702,2.399,703,1.934,704,2.399,705,2.399,706,2.399,707,2.399,708,2.399,709,1.934,710,2.399,711,2.399,712,2.399,713,2.399,714,2.399,715,2.399,716,5.084,717,3.395,718,2.399,719,2.399,720,3.94,721,2.399,722,2.399,723,2.399,724,2.399,725,2.399,726,2.399,727,2.399,728,2.399,729,3.94,730,2.399,731,2.399,732,2.399,733,2.399,734,2.399,735,2.399,736,3.395,737,2.399,738,2.399,739,2.399,740,2.399,741,2.399,742,2.399,743,2.399,744,2.399,745,3.94,746,2.399,747,2.399,748,1.934,749,2.399,750,2.399,751,2.399,752,1.934,753,3.395,754,2.399,755,2.399,756,2.399,757,2.399,758,2.399,759,2.399,760,2.399,761,2.399,762,2.399,763,2.399,764,2.399,765,2.399,766,2.399,767,2.399,768,1.934,769,2.399,770,2.399,771,2.399,772,2.399,773,2.399,774,2.399,775,1.934,776,2.399,777,2.399,778,1.934,779,2.399,780,2.399,781,2.399,782,2.399]],["title/dependencies.html",[638,1.893,673,1.951]],["body/dependencies.html",[14,0.048,31,0.62,398,0.046,399,0.046,672,3.564,673,2.58,783,4.42]],["title/miscellaneous/functions.html",[431,1.697,784,1.37]],["body/miscellaneous/functions.html",[5,0.611,6,0.398,8,0.728,14,0.048,30,0.728,70,0.855,71,0.978,257,0.978,398,0.045,399,0.045,427,2.954,431,2.209,432,3.377,448,2.954,489,3.508,784,2.539,785,4.35,786,4.35,787,5.223]],["title/index.html",[8,0.393,132,0.214,177,0.461]],["body/index.html",[3,0.781,6,0.473,14,0.052,15,0.7,31,0.547,33,0.889,52,0.981,72,0.547,75,0.766,77,0.654,81,1.023,83,0.866,90,0.866,104,0.917,106,0.766,117,1.023,132,0.426,137,1.023,398,0.043,399,0.043,401,2.367,404,3.142,406,3.76,533,3.76,535,3.76,585,3.142,596,3.142,619,3.76,632,4.171,673,2.274,703,3.142,709,4.328,748,3.76,768,3.76,788,4.663,789,4.99,790,4.663,791,3.896,792,5.426,793,5.172,794,2.645,795,3.896,796,3.896,797,5.471,798,3.896,799,3.896,800,4.99,801,3.896,802,3.896,803,4.99,804,3.896,805,4.663,806,3.896,807,3.896,808,3.896,809,3.896,810,3.896,811,3.896,812,3.896,813,3.896,814,3.896,815,3.896,816,3.896,817,3.896,818,4.663,819,3.896,820,3.896,821,3.896,822,5.287,823,3.896,824,3.896,825,3.896,826,3.896,827,3.142]],["title/license.html",[132,0.214,177,0.461,794,1.593]],["body/license.html",[4,0.572,14,0.044,32,1.071,34,1.071,52,0.802,72,0.572,104,0.942,398,0.044,399,0.044,505,3.289,534,3.289,552,3.289,794,2.769,827,3.864,828,5.088,829,4.078,830,4.078,831,4.078,832,4.791,833,4.078,834,4.078,835,4.078,836,4.078,837,4.791,838,4.078,839,5.25,840,5.545,841,4.078,842,4.791,843,5.088,844,4.078,845,5.088,846,4.791,847,4.078,848,4.078,849,4.078,850,4.078,851,4.078,852,4.078,853,4.078,854,4.078,855,4.078,856,4.078,857,4.078,858,4.078,859,4.791,860,4.791,861,4.078,862,4.078,863,4.791,864,4.078,865,4.078,866,4.078,867,4.078,868,4.078,869,4.078,870,4.078,871,4.078,872,4.078,873,4.078,874,4.078,875,4.078,876,4.078,877,4.078,878,4.078,879,4.078,880,4.078,881,4.078,882,4.078,883,4.078,884,4.078]],["title/modules.html",[400,1.674]],["body/modules.html",[14,0.046,398,0.046,399,0.046,400,1.968,401,2.248,885,4.428]],["title/overview.html",[886,3.038]],["body/overview.html",[0,0.038,14,0.046,16,0.508,398,0.046,399,0.046,400,1.96,752,3.558,775,3.558,778,3.558,886,3.558]],["title/miscellaneous/typealiases.html",[784,1.37,887,3.343]],["body/miscellaneous/typealiases.html",[5,0.616,6,0.401,7,1.153,8,0.735,13,0.863,14,0.046,68,1.196,398,0.046,399,0.046,431,2.229,784,2.563,888,4.391,889,4.391]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":211,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["0.1.0",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["0.1.1",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["00f6989",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["06396e6",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["0a95ac7",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":778,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["1265bee",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["16a3df8",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["17a2ccc",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":775,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["2.0.0",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["2017",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":505,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["21",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["222914b",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["22530b9",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["26cfa7e",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["317d914",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["3445337",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["38fd4b5",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["3c99d40",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["4159ce2",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["42631bc",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["44ea67",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["45c6b5f",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["48d4fe6",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["4a58c61",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["4bb3fde",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["4c9224b",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["4f23661",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["5.5.x",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["50d1962",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["52e9a22",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["538f9b7",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["566bf78",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["57dd436",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["5995f81",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["5aca67d",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["5ae52a7",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["6.0",{"_index":788,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["6016f12",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["652d632",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["67d3a5e",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["6e0a1a3",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["709327c",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["710c7f7",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["729f24e",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["73d65d7",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["7476301",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["76852bc",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["7831903",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["7d859c1",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["7e50d74",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":820,"title":{},"body":{"index.html":{}}}],["897b3fe",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":752,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["9831d36",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["9b5a6b0",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["9d0f754",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["9e5ac95",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["9fca12a",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["a77d07a",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":858,"title":{},"body":{"license.html":{}}}],["account",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":879,"title":{},"body":{"license.html":{}}}],["actual",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["ad",{"_index":437,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["add",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":888,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":99,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["along",{"_index":86,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["alway",{"_index":518,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":852,"title":{},"body":{"license.html":{}}}],["angular",{"_index":632,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/common",{"_index":53,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["angular/cor",{"_index":31,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"dependencies.html":{},"index.html":{}}}],["any).eventlistenersubscriptions[typ",{"_index":385,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["api",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":619,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["append",{"_index":111,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["appli",{"_index":108,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["aris",{"_index":883,"title":{},"body":{"license.html":{}}}],["assign",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["associ",{"_index":841,"title":{},"body":{"license.html":{}}}],["author",{"_index":872,"title":{},"body":{"license.html":{}}}],["auto",{"_index":748,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["automat",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["axi",{"_index":85,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["back",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["bcc9080",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["be",{"_index":109,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["bebd925",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["befor",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["behaviour",{"_index":101,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["bfe9bb4",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["bodi",{"_index":188,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["boolean",{"_index":59,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["bootstrap",{"_index":801,"title":{},"body":{"index.html":{}}}],["bound",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":885,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":525,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":829,"title":{},"body":{"license.html":{}}}],["c174023",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["c428eed",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["c5ef775",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["c6771eb",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":124,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["calledcount",{"_index":300,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["cancel",{"_index":136,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["canceldrag",{"_index":64,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["canceldrag$.complet",{"_index":301,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["canceldrag$.pip",{"_index":298,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["candrag",{"_index":337,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["case",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["caus",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["cf1bc61",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":496,"title":{"changelog.html":{}},"body":{}}],["changes.dragaxi",{"_index":329,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["charg",{"_index":836,"title":{},"body":{"license.html":{}}}],["checkeventlisten",{"_index":336,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["child",{"_index":121,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["claim",{"_index":875,"title":{},"body":{"license.html":{}}}],["class",{"_index":77,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["click",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["clienti",{"_index":71,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":433,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["clientx",{"_index":70,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":259,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["clone.appendchild(nod",{"_index":290,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["clone.innerhtml",{"_index":285,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["clone.parentelement!.removechild(clon",{"_index":294,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["close",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["combinelatest",{"_index":36,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["combinelatest(this.pointermov",{"_index":217,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["come",{"_index":814,"title":{},"body":{"index.html":{}}}],["commit",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":484,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["compon",{"_index":768,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["condit",{"_index":857,"title":{},"body":{"license.html":{}}}],["config",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":884,"title":{},"body":{"license.html":{}}}],["console.log('el",{"_index":807,"title":{},"body":{"index.html":{}}}],["const",{"_index":169,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["constructor",{"_index":161,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["constructor(el",{"_index":487,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["contain",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["container.direct",{"_index":56,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["content",{"_index":585,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["continu",{"_index":824,"title":{},"body":{"index.html":{}}}],["contract",{"_index":880,"title":{},"body":{"license.html":{}}}],["control",{"_index":102,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["coordin",{"_index":1,"title":{"interfaces/Coordinates.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["copi",{"_index":839,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":828,"title":{},"body":{"license.html":{}}}],["correctli",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":46,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["creat",{"_index":139,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["css",{"_index":107,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["current",{"_index":137,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["currentdrag",{"_index":208,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdrag$.complet",{"_index":305,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdrag$.next",{"_index":326,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdragdata",{"_index":49,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["currentdragdropdata",{"_index":458,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["currentdragsubscript",{"_index":450,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["cursor",{"_index":103,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["custom",{"_index":100,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["customis",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["d010733",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["d0372ec",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["d2fdcde",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["d72e16b",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["d7c9256",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["d96c26e",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":876,"title":{},"body":{"license.html":{}}}],["data",{"_index":81,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["dc0f863",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["dd3e89",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":842,"title":{},"body":{"license.html":{}}}],["declar",{"_index":404,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["default",{"_index":112,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["defin",{"_index":410,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["delet",{"_index":365,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["demo",{"_index":789,"title":{},"body":{"index.html":{}}}],["demoapp",{"_index":800,"title":{},"body":{"index.html":{}}}],["demomodul",{"_index":802,"title":{},"body":{"index.html":{}}}],["depend",{"_index":673,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["deregist",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["deregisterscrolllisten",{"_index":456,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["destroy",{"_index":160,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dev",{"_index":703,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["develop",{"_index":793,"title":{},"body":{"index.html":{}}}],["devic",{"_index":128,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["didn't",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["didoverlap",{"_index":481,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dimens",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["direct",{"_index":16,"title":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"overview.html":{}}}],["directli",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["directori",{"_index":816,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["dispos",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["distinctuntilchang",{"_index":430,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["distribut",{"_index":850,"title":{},"body":{"license.html":{}}}],["do",{"_index":471,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["document",{"_index":52,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["document.documentelement.scrollleft",{"_index":397,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["document.documentelement.scrolltop",{"_index":395,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["don't",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["dont",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":90,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["drag$.pip",{"_index":459,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["drag$.subscrib",{"_index":483,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragactiveclass",{"_index":110,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["draganddropmodul",{"_index":401,"title":{"modules/DragAndDropModule.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["draganddropmodule.forroot",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["dragaxi",{"_index":58,"title":{"interfaces/DragAxis.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragaxix",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["dragcancel",{"_index":67,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragcomplet",{"_index":212,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragcontain",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["dragcursor",{"_index":105,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragcursor=\"mov",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["dragend",{"_index":141,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragend(ev",{"_index":806,"title":{},"body":{"index.html":{}}}],["dragenddata",{"_index":297,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragended$.subscrib",{"_index":291,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragendev",{"_index":66,"title":{"interfaces/DragEndEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragent",{"_index":442,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["draggabl",{"_index":6,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["draggable.direct",{"_index":407,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["draggabledirect",{"_index":78,"title":{"directives/DraggableDirective.html":{}},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["draggablehelp",{"_index":50,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["draggablescrollcontainerdirect",{"_index":54,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragleav",{"_index":444,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragmoveev",{"_index":65,"title":{"interfaces/DragMoveEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragov",{"_index":445,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoveract",{"_index":466,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["dragoverclass",{"_index":439,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["dragpointerdown",{"_index":130,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragpointerdownev",{"_index":61,"title":{"interfaces/DragPointerDownEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragsnapgrid",{"_index":92,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragstart",{"_index":138,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["dragstarted$.subscrib",{"_index":251,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dragstartev",{"_index":63,"title":{"interfaces/DragStartEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["drop",{"_index":83,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["drop.module.t",{"_index":403,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["dropdata",{"_index":84,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["dropev",{"_index":426,"title":{"interfaces/DropEvent.html":{}},"body":{"interfaces/DropEvent.html":{}}}],["droppabl",{"_index":533,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["droppable.direct",{"_index":408,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable.j",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["droppable.umd.j",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["droppable/bundles/angular",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["droppable/dist/umd/angular",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["droppable/doc",{"_index":810,"title":{},"body":{"index.html":{}}}],["droppable/src/lib/drag",{"_index":402,"title":{},"body":{"modules/DragAndDropModule.html":{}}}],["droppable/src/lib/draggable.directive.t",{"_index":7,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/typealiases.html":{}}}],["droppable/src/lib/draggable.directive.ts:102",{"_index":419,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:108",{"_index":420,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:114",{"_index":413,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:120",{"_index":411,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:126",{"_index":417,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:132",{"_index":418,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:138",{"_index":423,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:146",{"_index":424,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:152",{"_index":425,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:158",{"_index":422,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:164",{"_index":421,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:78",{"_index":415,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:84",{"_index":412,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:90",{"_index":414,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/draggable.directive.ts:96",{"_index":416,"title":{},"body":{"directives/DraggableDirective.html":{}}}],["droppable/src/lib/droppable.directive.t",{"_index":427,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["droppable/src/lib/droppable.directive.ts:43",{"_index":491,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:49",{"_index":490,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:55",{"_index":492,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:61",{"_index":493,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:67",{"_index":494,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:73",{"_index":495,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppable/src/lib/droppable.directive.ts:75",{"_index":488,"title":{},"body":{"directives/DroppableDirective.html":{}}}],["droppabledirect",{"_index":405,"title":{"directives/DroppableDirective.html":{}},"body":{"modules/DragAndDropModule.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableel",{"_index":453,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.rect",{"_index":460,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.scrollcontainerrect",{"_index":461,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppableelement.updatecach",{"_index":457,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["droppablethen",{"_index":799,"title":{},"body":{"index.html":{}}}],["droppeddata",{"_index":805,"title":{},"body":{"index.html":{}}}],["duplic",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":204,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["each",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["ecc96ec",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["edg",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["ee1d06c",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":87,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["elementref",{"_index":18,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["emit",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["end",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["enter",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":812,"title":{},"body":{"index.html":{}}}],["error",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["even",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":72,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.canceldrag$.emit",{"_index":135,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.changedtouches[0].clienti",{"_index":376,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.changedtouches[0].clientx",{"_index":375,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.clienti",{"_index":363,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.clientx",{"_index":362,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.i",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["event.touches[0].clienti",{"_index":373,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.touches[0].clientx",{"_index":372,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["event.x",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["eventemitt",{"_index":21,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["eventlistenersubscript",{"_index":147,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["events:non",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":57,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["expos",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":865,"title":{},"body":{"license.html":{}}}],["extend",{"_index":62,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["f29b424",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["f36ed2d",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["f51214e",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["f6a5cd",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["fa8434b",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":98,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["fb75711",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":45,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["filter(([didoverlap",{"_index":480,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["filter(([previ",{"_index":313,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["filter(nod",{"_index":287,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["find",{"_index":808,"title":{},"body":{"index.html":{}}}],["fire",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":868,"title":{},"body":{"license.html":{}}}],["fix",{"_index":271,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["follow",{"_index":856,"title":{},"body":{"license.html":{}}}],["foreach(nod",{"_index":289,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["forroot",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":835,"title":{},"body":{"license.html":{}}}],["function",{"_index":431,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["furnish",{"_index":855,"title":{},"body":{"license.html":{}}}],["gener",{"_index":809,"title":{},"body":{"index.html":{}}}],["get",{"_index":177,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["getscrollposit",{"_index":391,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ghost",{"_index":94,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostdragen",{"_index":95,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostel",{"_index":158,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ghostelementappendto",{"_index":114,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostelementcr",{"_index":140,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ghostelementtempl",{"_index":123,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["global",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["globaldragstyl",{"_index":180,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["grant",{"_index":834,"title":{},"body":{"license.html":{}}}],["grid",{"_index":91,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["guidelin",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["hack",{"_index":174,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["haseventlisten",{"_index":338,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["height",{"_index":278,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["helper",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["helper.provid",{"_index":51,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["here",{"_index":803,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":833,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":142,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["higher",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":873,"title":{},"body":{"license.html":{}}}],["hover",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["html5",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["htmlelement",{"_index":115,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["htmlstyleel",{"_index":181,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":790,"title":{},"body":{"index.html":{}}}],["icon",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["ie",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["immedi",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":79,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["impli",{"_index":866,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":845,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["inject",{"_index":27,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["inject(docu",{"_index":166,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["input",{"_index":22,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["insert",{"_index":118,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["insid",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["instal",{"_index":792,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":288,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["interact",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"overview.html":{}}}],["iscoordinatewithinrectangl",{"_index":432,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["iscoordinatewithinrectangle(clientx",{"_index":786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinel",{"_index":463,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["item",{"_index":804,"title":{},"body":{"index.html":{}}}],["key",{"_index":387,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["kind",{"_index":864,"title":{},"body":{"license.html":{}}}],["lazili",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["leav",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":274,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["lettabl",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":831,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":877,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":874,"title":{},"body":{"license.html":{}}}],["librari",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":794,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":846,"title":{},"body":{"license.html":{}}}],["line",{"_index":447,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["listen",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":815,"title":{},"body":{"index.html":{}}}],["lock",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["loosen",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["maintain",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":38,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(([pointermoveev",{"_index":219,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(([previ",{"_index":319,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(calledcount",{"_index":299,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(movedata",{"_index":230,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["map(valu",{"_index":310,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["margin",{"_index":281,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["match",{"_index":399,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["math.round(movedata.transformi",{"_index":236,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["math.round(movedata.transformx",{"_index":233,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["matt",{"_index":830,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":867,"title":{},"body":{"license.html":{}}}],["merg",{"_index":34,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"license.html":{}}}],["merge(dragcomplet",{"_index":306,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mergemap",{"_index":39,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mergemap((pointerdownev",{"_index":173,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mergemap(dragenddata",{"_index":296,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["metadata",{"_index":409,"title":{},"body":{"directives/DraggableDirective.html":{},"directives/DroppableDirective.html":{}}}],["method",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["migrat",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["mimic",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["miscellan",{"_index":784,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":827,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":848,"title":{},"body":{"license.html":{}}}],["modul",{"_index":400,"title":{"modules/DragAndDropModule.html":{},"modules.html":{}},"body":{"modules/DragAndDropModule.html":{},"changelog.html":{},"modules.html":{},"overview.html":{}}}],["mous",{"_index":126,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mousedown",{"_index":150,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mouseent",{"_index":152,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseev",{"_index":73,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseleav",{"_index":153,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemov",{"_index":148,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveev",{"_index":357,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveevent.clienti",{"_index":360,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mousemoveevent.clientx",{"_index":359,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mouseup",{"_index":151,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["move",{"_index":134,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["movedata",{"_index":237,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.scrollleft",{"_index":241,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.scrolltop",{"_index":244,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.transformi",{"_index":235,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["movedata.transformx",{"_index":232,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["moz",{"_index":189,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ms",{"_index":192,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["mwldraggabl",{"_index":76,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["mwldroppabl",{"_index":436,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["name",{"_index":448,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":131,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["next",{"_index":113,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["next.i",{"_index":318,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["next.x",{"_index":316,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ng",{"_index":116,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["ng4",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":406,"title":{},"body":{"modules/DragAndDropModule.html":{},"index.html":{}}}],["ngonchanges(chang",{"_index":328,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngondestroy",{"_index":330,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngoninit",{"_index":167,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ngzone",{"_index":25,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["node",{"_index":122,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["node.j",{"_index":813,"title":{},"body":{"index.html":{}}}],["none",{"_index":191,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["noninfring",{"_index":871,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":859,"title":{},"body":{"license.html":{}}}],["now",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":797,"title":{},"body":{"index.html":{}}}],["null",{"_index":159,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["number",{"_index":12,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["o",{"_index":325,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object",{"_index":80,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(styles).foreach(key",{"_index":388,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(this.eventlistenersubscriptions).foreach(typ",{"_index":384,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["object.keys(this.eventlistenersubscriptions).length",{"_index":339,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["observ",{"_index":33,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["observable(observ",{"_index":198,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["observer.next(",{"_index":205,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["obtain",{"_index":838,"title":{},"body":{"license.html":{}}}],["old",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["on",{"_index":125,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onc",{"_index":596,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onchang",{"_index":24,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ondestroy",{"_index":23,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["oninit",{"_index":17,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmousedown(ev",{"_index":355,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseent",{"_index":377,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseleav",{"_index":379,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["onmouseup(ev",{"_index":364,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ontouchend(ev",{"_index":374,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["ontouchstart(ev",{"_index":367,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["oper",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":30,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["origin",{"_index":96,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["otherwis",{"_index":882,"title":{},"body":{"license.html":{}}}],["out",{"_index":534,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["output",{"_index":20,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["outsid",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":438,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["overlap",{"_index":441,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(distinctuntilchang",{"_index":465,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlaps$.pipe(filter(overlapsnow",{"_index":477,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapschang",{"_index":464,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow",{"_index":474,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overlapsnow)).subscrib",{"_index":478,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["overview",{"_index":886,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrit",{"_index":120,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["packag",{"_index":638,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":43,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["paramet",{"_index":489,"title":{},"body":{"directives/DroppableDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":119,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["part",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["particular",{"_index":869,"title":{},"body":{"license.html":{}}}],["pass",{"_index":82,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["path",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":672,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["perform",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":832,"title":{},"body":{"license.html":{}}}],["permit",{"_index":854,"title":{},"body":{"license.html":{}}}],["person",{"_index":837,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":206,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(filter(overlapsnow",{"_index":473,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["pipe(shar",{"_index":216,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pipe(take(1",{"_index":307,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointer",{"_index":127,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["pointerdown",{"_index":143,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.clienti",{"_index":225,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdownevent.clientx",{"_index":222,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdrag",{"_index":170,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdragged$.pip",{"_index":309,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerdragged$.pipe(pairwis",{"_index":312,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerev",{"_index":69,"title":{"interfaces/PointerEvent.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermov",{"_index":144,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermove.pip",{"_index":248,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermoveevent.clienti",{"_index":224,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointermoveevent.clientx",{"_index":221,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["pointerup",{"_index":145,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["port",{"_index":819,"title":{},"body":{"index.html":{}}}],["portion",{"_index":862,"title":{},"body":{"license.html":{}}}],["posit",{"_index":270,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["power",{"_index":795,"title":{},"body":{"index.html":{}}}],["prepar",{"_index":811,"title":{},"body":{"index.html":{}}}],["preserv",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["press",{"_index":129,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["prevent",{"_index":175,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["previou",{"_index":314,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["previous.i",{"_index":317,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["previous.x",{"_index":315,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["privat",{"_index":146,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["project",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["projects/.../draggable.directive.t",{"_index":889,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../droppable.directive.t",{"_index":785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/angular",{"_index":5,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["properti",{"_index":9,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragStartEvent.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["prototyp",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":552,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["public",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":849,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":870,"title":{},"body":{"license.html":{}}}],["recalcul",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["recomput",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":257,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/functions.html":{}}}],["rect.height}px",{"_index":279,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rect.left",{"_index":434,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.left}px",{"_index":275,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rect.top",{"_index":435,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["rect.top}px",{"_index":273,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rect.width}px",{"_index":277,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["rectangl",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["regular",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":825,"title":{},"body":{"index.html":{}}}],["releaselicens",{"_index":826,"title":{},"body":{"index.html":{}}}],["reload",{"_index":821,"title":{},"body":{"index.html":{}}}],["remov",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["renam",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":162,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["renderer2",{"_index":19,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["replaysubject",{"_index":35,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["repliat",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":817,"title":{},"body":{"index.html":{}}}],["requir",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["respect",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["restor",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":844,"title":{},"body":{"license.html":{}}}],["result",{"_index":398,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":202,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["revert",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":847,"title":{},"body":{"license.html":{}}}],["round",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":709,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":37,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":48,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["safari",{"_index":179,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["same",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":798,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":55,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["scroll.left",{"_index":227,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scroll.top",{"_index":229,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollabl",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["scrollcontain",{"_index":165,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollcontainerrect",{"_index":455,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["scrollcontainerscrol",{"_index":197,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollcontainerscroll$).pip",{"_index":218,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrolli",{"_index":243,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollleft",{"_index":226,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrolltop",{"_index":228,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["scrollx",{"_index":240,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["seamless",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":468,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["select",{"_index":178,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["selector",{"_index":75,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["sell",{"_index":853,"title":{},"body":{"license.html":{}}}],["server",{"_index":818,"title":{},"body":{"index.html":{}}}],["set",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["setcursor(valu",{"_index":381,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["setelementstyl",{"_index":386,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["shall",{"_index":860,"title":{},"body":{"license.html":{}}}],["share",{"_index":44,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["show",{"_index":93,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["showoriginalelementwhiledrag",{"_index":97,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["side",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["simplechang",{"_index":26,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["snap",{"_index":89,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["snapgrid",{"_index":60,"title":{"interfaces/SnapGrid.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["softwar",{"_index":840,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/Coordinates.html":{},"modules/DragAndDropModule.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["standard",{"_index":449,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["start",{"_index":132,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{}}}],["startscrollposit",{"_index":195,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startscrollposition.left",{"_index":242,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startscrollposition.top",{"_index":245,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startwith",{"_index":47,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["startwith(startscrollposit",{"_index":207,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["stop",{"_index":443,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["string",{"_index":106,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["style",{"_index":183,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["styles[key",{"_index":390,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["subject",{"_index":32,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"license.html":{}}}],["sublicens",{"_index":851,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":302,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["subscript",{"_index":429,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["substanti",{"_index":861,"title":{},"body":{"license.html":{}}}],["system.j",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":428,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["tabl",{"_index":791,"title":{},"body":{"index.html":{}}}],["take",{"_index":41,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["take(1",{"_index":249,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takelast",{"_index":42,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takelast(1",{"_index":250,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takeuntil",{"_index":40,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["takeuntil(dragcomplet",{"_index":247,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["templat",{"_index":117,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"index.html":{}}}],["templateref",{"_index":28,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["test",{"_index":822,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":823,"title":{},"body":{"index.html":{}}}],["text",{"_index":176,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["text/css",{"_index":185,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["there'",{"_index":469,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.candrag",{"_index":172,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.checkeventlisten",{"_index":168,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.currentdragsubscript",{"_index":451,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.currentdragsubscription.unsubscrib",{"_index":486,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.destroy",{"_index":215,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.destroy$.next",{"_index":335,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.document.head.appendchild(globaldragstyl",{"_index":194,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.document.head.removechild(globaldragstyl",{"_index":308,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragactiveclass",{"_index":255,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragaxis.i",{"_index":239,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragaxis.x",{"_index":238,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragcursor",{"_index":280,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragend.next",{"_index":303,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragenter.next",{"_index":476,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.draggablehelper.currentdrag.next(currentdrag",{"_index":295,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.draggablehelper.currentdrag.subscrib",{"_index":452,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragging.next",{"_index":320,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragleave.next",{"_index":482,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragover.next",{"_index":479,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragoverclass",{"_index":475,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dragpointerdown.next",{"_index":210,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragsnapgrid.i",{"_index":234,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragsnapgrid.x",{"_index":231,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.dragstart.next",{"_index":252,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.drop.next",{"_index":485,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.dropdata",{"_index":327,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeel",{"_index":254,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.clonenod",{"_index":260,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.getboundingclientrect",{"_index":258,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.nexts",{"_index":267,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.element.nativeelement.parentnode!.insertbefor",{"_index":266,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mousedown",{"_index":341,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseent",{"_index":351,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseleav",{"_index":353,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mousemov",{"_index":356,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.mouseup",{"_index":344,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchcancel",{"_index":350,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchend",{"_index":348,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchmov",{"_index":368,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.eventlistenersubscriptions.touchstart",{"_index":346,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.getscrollposit",{"_index":196,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostdragen",{"_index":256,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostel",{"_index":268,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementappendto",{"_index":264,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementappendto.appendchild(clon",{"_index":265,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementcreated.emit",{"_index":293,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ghostelementtempl",{"_index":282,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmousedown(ev",{"_index":343,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseent",{"_index":352,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseleav",{"_index":354,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.onmouseup(ev",{"_index":345,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ontouchend(ev",{"_index":349,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.ontouchstart(ev",{"_index":347,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown",{"_index":214,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown$.complet",{"_index":332,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown$.next",{"_index":361,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerdown$.pip",{"_index":171,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointermove$.complet",{"_index":333,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointermove$.next",{"_index":358,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup",{"_index":213,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup$.complet",{"_index":334,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.pointerup$.next",{"_index":366,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.addclass",{"_index":253,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.appendchild",{"_index":186,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.createel",{"_index":182,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.createtext",{"_index":187,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.listen",{"_index":342,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.listen(scrollcontain",{"_index":203,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.removeclass",{"_index":304,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setattribute(globaldragstyl",{"_index":184,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyl",{"_index":262,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyle(el",{"_index":389,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.renderer.setstyle(this.element.nativeel",{"_index":382,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontain",{"_index":199,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontainer.elementref.nativeel",{"_index":200,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontainer.elementref.nativeelement.getboundingclientrect",{"_index":462,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrollleft",{"_index":393,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.scrollcontainer.elementref.nativeelement.scrolltop",{"_index":392,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcursor",{"_index":380,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setcursor(this.dragcursor",{"_index":378,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setelementstyles(clon",{"_index":269,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.setelementstyles(this.ghostel",{"_index":324,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.showoriginalelementwhiledrag",{"_index":261,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.unsubscribeeventlisten",{"_index":331,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.validatedrag",{"_index":246,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.vcr.createembeddedview",{"_index":284,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.vcr.remove(this.vcr.indexof(viewref",{"_index":292,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.zone.run",{"_index":209,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["this.zone.runoutsideangular",{"_index":340,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["through",{"_index":796,"title":{},"body":{"index.html":{}}}],["throw",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":440,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["todo",{"_index":467,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["top",{"_index":272,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["tort",{"_index":881,"title":{},"body":{"license.html":{}}}],["touch",{"_index":133,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["touchcancel",{"_index":157,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchend",{"_index":156,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchev",{"_index":74,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmov",{"_index":155,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveev",{"_index":369,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":371,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":370,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["touchstart",{"_index":154,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transform",{"_index":321,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformi",{"_index":223,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformx",{"_index":220,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["transformy}px",{"_index":323,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["translate(${transformx}px",{"_index":322,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["true",{"_index":88,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["tslint:dis",{"_index":446,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":887,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["umd",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":787,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unsubscribeeventlisten",{"_index":383,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["until",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["updatecach",{"_index":454,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["upgrad",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":104,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":190,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["valid",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["validatedrag",{"_index":68,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["valu",{"_index":311,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["vcr",{"_index":164,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["version",{"_index":501,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":472,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{}}}],["view",{"_index":535,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["viewcontainerref",{"_index":29,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["viewref",{"_index":283,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["viewref.rootnod",{"_index":286,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["visibl",{"_index":263,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["void",{"_index":149,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["warranti",{"_index":863,"title":{},"body":{"license.html":{}}}],["way",{"_index":470,"title":{},"body":{"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"changelog.html":{}}}],["webkit",{"_index":193,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["whether",{"_index":878,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["width",{"_index":276,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["window",{"_index":201,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["window.pagexoffset",{"_index":396,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["window.pageyoffset",{"_index":394,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{}}}],["without",{"_index":843,"title":{},"body":{"license.html":{}}}],["work",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["wors",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":10,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["y",{"_index":11,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}],["yourself",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":163,"title":{},"body":{"interfaces/Coordinates.html":{},"interfaces/DragAxis.html":{},"interfaces/DragEndEvent.html":{},"interfaces/DragMoveEvent.html":{},"interfaces/DragPointerDownEvent.html":{},"interfaces/DragStartEvent.html":{},"directives/DraggableDirective.html":{},"interfaces/DropEvent.html":{},"directives/DroppableDirective.html":{},"interfaces/PointerEvent.html":{},"interfaces/SnapGrid.html":{},"changelog.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Coordinates.html":{"url":"interfaces/Coordinates.html","title":"interface - Coordinates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DragAndDropModule.html":{"url":"modules/DragAndDropModule.html","title":"module - DragAndDropModule","body":"\n                   \n\n\n\n\n  Modules\n  DragAndDropModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/drag-and-drop.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                DraggableDirective\n                            \n                            \n                                DroppableDirective\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    DraggableDirective\n                            \n                            \n                                    DroppableDirective\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\n@NgModule({\n  declarations: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ],\n  exports: [\n    DraggableDirective,\n    DroppableDirective,\n    DraggableScrollContainerDirective\n  ]\n})\nexport class DragAndDropModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragAxis.html":{"url":"interfaces/DragAxis.html","title":"interface - DragAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragAxis\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragEndEvent.html":{"url":"interfaces/DragEndEvent.html","title":"interface - DragEndEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragEndEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dragCancelled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dragCancelled\n                                    \n                                \n                                \n                                    \n                                        dragCancelled:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragMoveEvent.html":{"url":"interfaces/DragMoveEvent.html","title":"interface - DragMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPointerDownEvent.html":{"url":"interfaces/DragPointerDownEvent.html","title":"interface - DragPointerDownEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragPointerDownEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Coordinates\n            \n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragStartEvent.html":{"url":"interfaces/DragStartEvent.html","title":"interface - DragStartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DragStartEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        cancelDrag$\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelDrag$\n                                    \n                                \n                                \n                                    \n                                        cancelDrag$:     ReplaySubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReplaySubject\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DraggableDirective.html":{"url":"directives/DraggableDirective.html","title":"directive - DraggableDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  DraggableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnChanges\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlDraggable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragAxis\n                            \n                            \n                                dragCursor\n                            \n                            \n                                dragSnapGrid\n                            \n                            \n                                dropData\n                            \n                            \n                                ghostDragEnabled\n                            \n                            \n                                ghostElementAppendTo\n                            \n                            \n                                ghostElementTemplate\n                            \n                            \n                                showOriginalElementWhileDragging\n                            \n                            \n                                validateDrag\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnd\n                            \n                            \n                                dragging\n                            \n                            \n                                dragPointerDown\n                            \n                            \n                                dragStart\n                            \n                            \n                                ghostElementCreated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        The css class to apply when the element is being dragged\n\n                            \n                            Type:    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:120\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragAxis\n                    \n                    \n                        The axis along which the element is draggable\n\n                            \n                            Type:    DragAxis\n\n                            \n                        \n                            Default value: { x: true, y: true }\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:84\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragCursor\n                    \n                    \n                        The cursor to use when dragging the element\n\n                            \n                            Type:    string\n\n                            \n                        \n                            Default value: ''\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:114\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSnapGrid\n                    \n                    \n                        Snap all drags to an x / y grid\n\n                            \n                            Type:    SnapGrid\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:90\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dropData\n                    \n                    \n                        an object of data you can pass to the drop event\n\n                            \n                            Type:    any\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:78\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostDragEnabled\n                    \n                    \n                        Show a ghost element that shows the drag when dragging\n\n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: true\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:96\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementAppendTo\n                    \n                    \n                        The element the ghost element will be appended to. Default is next to the dragged element\n\n                            \n                            Type:    HTMLElement\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:126\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementTemplate\n                    \n                    \n                        An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n\n                            \n                            Type:    TemplateRef\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:132\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showOriginalElementWhileDragging\n                    \n                    \n                        Show the original element when ghostDragEnabled is true\n\n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:102\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateDrag\n                    \n                    \n                        Allow custom behaviour to control when the element is dragged\n\n                            \n                            Type:    ValidateDrag\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:108\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnd\n                    \n                    \n                        Called after the element is dragged\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:164\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragging\n                    \n                    \n                        Called when the element is being dragged\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:158\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPointerDown\n                    \n                    \n                        Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:138\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragStart\n                    \n                    \n                        Called when the element has started to be dragged.\nOnly called after at least one mouse or touch move event.\nIf you call $event.cancelDrag$.emit() it will cancel the current drag\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:146\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementCreated\n                    \n                    \n                        Called after the ghost element has been created\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/draggable.directive.ts:152\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropEvent.html":{"url":"interfaces/DropEvent.html","title":"interface - DropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dropData\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropData\n                                    \n                                \n                                \n                                    \n                                        dropData:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DroppableDirective.html":{"url":"directives/DroppableDirective.html","title":"directive - DroppableDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  DroppableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n        \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlDroppable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentDragSubscription\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragActiveClass\n                            \n                            \n                                dragOverClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragEnter\n                            \n                            \n                                dragLeave\n                            \n                            \n                                dragOver\n                            \n                            \n                                drop\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        draggableHelper\n                                                  \n                                                        \n                                                                    DraggableHelper\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        scrollContainer\n                                                  \n                                                        \n                                                                    DraggableScrollContainerDirective\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragActiveClass\n                    \n                    \n                        Added to the element any time a draggable element is being dragged\n\n                            \n                            Type:    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOverClass\n                    \n                    \n                        Added to the element when an element is dragged over it\n\n                            \n                            Type:    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:43\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        dragEnter\n                    \n                    \n                        Called when a draggable element starts overlapping the element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragLeave\n                    \n                    \n                        Called when a draggable element stops overlapping the element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        dragOver\n                    \n                    \n                        Called when a draggable element is moved over the element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:67\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drop\n                    \n                    \n                        Called when a draggable element is dropped on this element\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:73\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentDragSubscription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        currentDragSubscription:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/angular-draggable-droppable/src/lib/droppable.directive.ts:75\n                            \n                        \n\n\n            \n        \n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone,\n  Input,\n  Renderer2,\n  Optional\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX = rect.top &&\n    clientY  {\n  dropData: T;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Added to the element when an element is dragged over it\n   */\n  @Input()\n  dragOverClass: string;\n\n  /**\n   * Added to the element any time a draggable element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output()\n  dragEnter = new EventEmitter();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output()\n  dragLeave = new EventEmitter();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output()\n  dragOver = new EventEmitter();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output()\n  drop = new EventEmitter(); // tslint:disable-line no-output-named-after-standard-event\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective\n  ) {}\n\n  ngOnInit() {\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      drag$ => {\n        this.renderer.addClass(\n          this.element.nativeElement,\n          this.dragActiveClass\n        );\n        const droppableElement: {\n          rect?: ClientRect;\n          updateCache: boolean;\n          scrollContainerRect?: ClientRect;\n        } = {\n          updateCache: true\n        };\n\n        const deregisterScrollListener = this.renderer.listen(\n          this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window',\n          'scroll',\n          () => {\n            droppableElement.updateCache = true;\n          }\n        );\n\n        let currentDragDropData: any;\n        const overlaps$ = drag$.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            if (droppableElement.updateCache) {\n              droppableElement.rect = this.element.nativeElement.getBoundingClientRect();\n              if (this.scrollContainer) {\n                droppableElement.scrollContainerRect = this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();\n              }\n              droppableElement.updateCache = false;\n            }\n            const isWithinElement = isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableElement.rect as ClientRect\n            );\n            if (droppableElement.scrollContainerRect) {\n              return (\n                isWithinElement &&\n                isCoordinateWithinRectangle(\n                  clientX,\n                  clientY,\n                  droppableElement.scrollContainerRect as ClientRect\n                )\n              );\n            } else {\n              return isWithinElement;\n            }\n          })\n        );\n\n        const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged$\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.renderer.addClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps$.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged$\n          .pipe(\n            pairwise(),\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragOverClass\n            );\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag$.subscribe({\n          complete: () => {\n            deregisterScrollListener();\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            if (dragOverActive) {\n              this.renderer.removeClass(\n                this.element.nativeElement,\n                this.dragOverClass\n              );\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.currentDragSubscription) {\n      this.currentDragSubscription.unsubscribe();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEvent.html":{"url":"interfaces/PointerEvent.html","title":"interface - PointerEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SnapGrid.html":{"url":"interfaces/SnapGrid.html","title":"interface - SnapGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SnapGrid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        x\n                                \n                                \n                                            Optional\n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges,\n  Inject,\n  TemplateRef,\n  ViewContainerRef,\n  Optional\n} from '@angular/core';\nimport { Subject, Observable, merge, ReplaySubject, combineLatest } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  take,\n  takeLast,\n  pairwise,\n  share,\n  filter,\n  count,\n  startWith\n} from 'rxjs/operators';\nimport { CurrentDragData, DraggableHelper } from './draggable-helper.provider';\nimport { DOCUMENT } from '@angular/common';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport interface DragPointerDownEvent extends Coordinates {}\n\nexport interface DragStartEvent {\n  cancelDrag$: ReplaySubject;\n}\n\nexport interface DragMoveEvent extends Coordinates {}\n\nexport interface DragEndEvent extends Coordinates {\n  dragCancelled: boolean;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input()\n  dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input()\n  dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input()\n  dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input()\n  ghostDragEnabled: boolean = true;\n\n  /**\n   * Show the original element when ghostDragEnabled is true\n   */\n  @Input()\n  showOriginalElementWhileDragging: boolean = false;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input()\n  validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input()\n  dragCursor: string = '';\n\n  /**\n   * The css class to apply when the element is being dragged\n   */\n  @Input()\n  dragActiveClass: string;\n\n  /**\n   * The element the ghost element will be appended to. Default is next to the dragged element\n   */\n  @Input()\n  ghostElementAppendTo: HTMLElement;\n\n  /**\n   * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n   */\n  @Input()\n  ghostElementTemplate: TemplateRef;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output()\n  dragPointerDown = new EventEmitter();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event.\n   * If you call $event.cancelDrag$.emit() it will cancel the current drag\n   */\n  @Output()\n  dragStart = new EventEmitter();\n\n  /**\n   * Called after the ghost element has been created\n   */\n  @Output()\n  ghostElementCreated = new EventEmitter();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output()\n  dragging = new EventEmitter();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output()\n  dragEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  pointerDown$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp$ = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  private ghostElement: HTMLElement | null;\n\n  private destroy$ = new Subject();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone,\n    private vcr: ViewContainerRef,\n    @Optional() private scrollContainer: DraggableScrollContainerDirective,\n    @Inject(DOCUMENT) private document: any\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDragged$: Observable = this.pointerDown$.pipe(\n      filter(() => this.canDrag()),\n      mergeMap((pointerDownEvent: PointerEvent) => {\n        // hack to prevent text getting selected in safari while dragging\n        const globalDragStyle: HTMLStyleElement = this.renderer.createElement(\n          'style'\n        );\n        this.renderer.setAttribute(globalDragStyle, 'type', 'text/css');\n        this.renderer.appendChild(\n          globalDragStyle,\n          this.renderer.createText(`\n          body * {\n           -moz-user-select: none;\n           -ms-user-select: none;\n           -webkit-user-select: none;\n           user-select: none;\n          }\n        `)\n        );\n        this.document.head.appendChild(globalDragStyle);\n\n        const startScrollPosition = this.getScrollPosition();\n\n        const scrollContainerScroll$ = new Observable(observer => {\n          const scrollContainer = this.scrollContainer\n            ? this.scrollContainer.elementRef.nativeElement\n            : 'window';\n          return this.renderer.listen(scrollContainer, 'scroll', e =>\n            observer.next(e)\n          );\n        }).pipe(\n          startWith(startScrollPosition),\n          map(() => this.getScrollPosition())\n        );\n\n        const currentDrag$ = new Subject();\n        const cancelDrag$ = new ReplaySubject();\n\n        this.zone.run(() => {\n          this.dragPointerDown.next({ x: 0, y: 0 });\n        });\n\n        const dragComplete$ = merge(\n          this.pointerUp$,\n          this.pointerDown$,\n          cancelDrag$,\n          this.destroy$\n        ).pipe(share());\n\n        const pointerMove = combineLatest(this.pointerMove$, scrollContainerScroll$).pipe(\n          map(([pointerMoveEvent, scroll]) => {\n            return {\n              currentDrag$,\n              transformX: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n              transformY: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n              clientX: pointerMoveEvent.clientX,\n              clientY: pointerMoveEvent.clientY,\n              scrollLeft: scroll.left,\n              scrollTop: scroll.top\n            };\n          }),\n          map(moveData => {\n            if (this.dragSnapGrid.x) {\n              moveData.transformX =\n                Math.round(moveData.transformX / this.dragSnapGrid.x) *\n                this.dragSnapGrid.x;\n            }\n\n            if (this.dragSnapGrid.y) {\n              moveData.transformY =\n                Math.round(moveData.transformY / this.dragSnapGrid.y) *\n                this.dragSnapGrid.y;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            if (!this.dragAxis.x) {\n              moveData.transformX = 0;\n            }\n\n            if (!this.dragAxis.y) {\n              moveData.transformY = 0;\n            }\n\n            return moveData;\n          }),\n          map(moveData => {\n            const scrollX = moveData.scrollLeft - startScrollPosition.left;\n            const scrollY = moveData.scrollTop - startScrollPosition.top;\n            return {\n              ...moveData,\n              x: moveData.transformX + scrollX,\n              y: moveData.transformY + scrollY\n            };\n          }),\n          filter(\n            ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n          ),\n          takeUntil(dragComplete$),\n          share()\n        );\n\n        const dragStarted$ = pointerMove.pipe(\n          take(1),\n          share()\n        );\n        const dragEnded$ = pointerMove.pipe(\n          takeLast(1),\n          share()\n        );\n\n        dragStarted$.subscribe(() => {\n          this.zone.run(() => {\n            this.dragStart.next({ cancelDrag$ });\n          });\n\n          this.renderer.addClass(\n            this.element.nativeElement,\n            this.dragActiveClass\n          );\n\n          if (this.ghostDragEnabled) {\n            const rect = this.element.nativeElement.getBoundingClientRect();\n            const clone = this.element.nativeElement.cloneNode(\n              true\n            ) as HTMLElement;\n            if (!this.showOriginalElementWhileDragging) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                'hidden'\n              );\n            }\n\n            if (this.ghostElementAppendTo) {\n              this.ghostElementAppendTo.appendChild(clone);\n            } else {\n              this.element.nativeElement.parentNode!.insertBefore(\n                clone,\n                this.element.nativeElement.nextSibling\n              );\n            }\n\n            this.ghostElement = clone;\n\n            this.setElementStyles(clone, {\n              position: 'fixed',\n              top: `${rect.top}px`,\n              left: `${rect.left}px`,\n              width: `${rect.width}px`,\n              height: `${rect.height}px`,\n              cursor: this.dragCursor,\n              margin: '0'\n            });\n\n            if (this.ghostElementTemplate) {\n              const viewRef = this.vcr.createEmbeddedView(\n                this.ghostElementTemplate\n              );\n              clone.innerHTML = '';\n              viewRef.rootNodes\n                .filter(node => node instanceof Node)\n                .forEach(node => {\n                  clone.appendChild(node);\n                });\n              dragEnded$.subscribe(() => {\n                this.vcr.remove(this.vcr.indexOf(viewRef));\n              });\n            }\n\n            this.zone.run(() => {\n              this.ghostElementCreated.emit();\n            });\n\n            dragEnded$.subscribe(() => {\n              clone.parentElement!.removeChild(clone);\n              this.ghostElement = null;\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'visibility',\n                ''\n              );\n            });\n          }\n\n          this.draggableHelper.currentDrag.next(currentDrag$);\n        });\n\n        dragEnded$\n          .pipe(\n            mergeMap(dragEndData => {\n              const dragEndData$ = cancelDrag$.pipe(\n                count(),\n                take(1),\n                map(calledCount => ({\n                  ...dragEndData,\n                  dragCancelled: calledCount > 0\n                }))\n              );\n              cancelDrag$.complete();\n              return dragEndData$;\n            })\n          )\n          .subscribe(({ x, y, dragCancelled }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y, dragCancelled });\n            });\n            this.renderer.removeClass(\n              this.element.nativeElement,\n              this.dragActiveClass\n            );\n            currentDrag$.complete();\n          });\n\n        merge(dragComplete$, dragEnded$)\n          .pipe(take(1))\n          .subscribe(() => {\n            this.document.head.removeChild(globalDragStyle);\n          });\n\n        return pointerMove;\n      }),\n      share()\n    );\n\n    merge(\n      pointerDragged$.pipe(\n        take(1),\n        map(value => [, value])\n      ),\n      pointerDragged$.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        }),\n        map(([previous, next]) => next)\n      )\n      .subscribe(\n        ({ x, y, currentDrag$, clientX, clientY, transformX, transformY }) => {\n          this.zone.run(() => {\n            this.dragging.next({ x, y });\n          });\n          if (this.ghostElement) {\n            const transform = `translate(${transformX}px, ${transformY}px)`;\n            this.setElementStyles(this.ghostElement, {\n              transform,\n              '-webkit-transform': transform,\n              '-ms-transform': transform,\n              '-moz-transform': transform,\n              '-o-transform': transform\n            });\n          }\n          currentDrag$.next({\n            clientX,\n            clientY,\n            dropData: this.dropData\n          });\n        }\n      );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dragAxis) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown$.complete();\n    this.pointerMove$.complete();\n    this.pointerUp$.complete();\n    this.destroy$.next();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove$.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove$.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown$.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp$.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor('');\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n\n  private setElementStyles(\n    element: HTMLElement,\n    styles: { [key: string]: string }\n  ) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(element, key, styles[key]);\n    });\n  }\n\n  private getScrollPosition() {\n    if (this.scrollContainer) {\n      return {\n        top: this.scrollContainer.elementRef.nativeElement.scrollTop,\n        left: this.scrollContainer.elementRef.nativeElement.scrollLeft\n      };\n    } else {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n4.0.0 (2018-08-29)\nBug Fixes\n\naccount for the window being scrolled whilst dragging (566bf78)\nallow dragging the element inside a scrollable container (6e0a1a3), closes #25\nalways remove global styles when clicking draggable elements (c428eed), closes #44\nappend the ghost element to the body (4f23661)\nbump up z-index of element being dragged (9d0f754)\ncall drag end event after the drop event (317d914)\ndon't fire drop events when the droppable element is scrolled out of the view (4c9224b)\ndon't highlight text when dragging elements (67d3a5e), closes #28\nfire the drag end event before the drop event (4bb3fde)\nmaintain old ghost element behaviour by default (cf1bc61)\npreserve original element styles after dragging (f36ed2d)\nremove automatic pointer-events:none on dragged element (bfe9bb4)\nremove margin on the ghost element (06396e6)\nremove the drag helper provider from the public api (48d4fe6)\nround snap grids so dragging from each side is even (fa8434b)\nset dimensions and z-index on ghost element (9b5a6b0)\ndragCursor: don't default the drag cursor to move (0a95ac7)\ndroppable: correctly account for scroll events when dragging elements (c5ef775), closes #23\ndroppable: dont throw when immediately destroying the directive (dd3e89e)\n\nFeatures\n\ndragActiveClass: add class when dragging element (ee1d06c)\ndragCancel$: allow the drag to be cancelled (538f9b7), closes #30\ndraggable: add option to show the original element while dragging (d010733)\ndragOverClass: add a class when an element is dragged over it (76852bc)\ndroppable: add css class when any element is being dragged (5995f81)\nadd a way of setting the scroll container if not the window (9831d36)\nghostElementAppendTo: allow the ghost element parent to be customised (f51214e)\nghostElementCreated: emit new event after the ghost element is created (22530b9)\nghostElementTemplate: allow changing the ghost element contents (ecc96ec)\nexpose interfaces for all events (c174023)\nremove the DragAndDropModule.forRoot method (5ae52a7)\n\nPerformance Improvements\n\nderegister scroll listener once drag complete (7e50d74)\nonly recalculate the bounding rectangle once after scrolling (d72e16b)\nonly recompute draggable position on window scroll (f6a5cde)\n\nBREAKING CHANGES\n\nThe dragEnd event will now always fire before the drop event and not after\ndragCursor: The drag cursor will no longer be set to move by default, to restore the\nbehaviour set dragCursor=\"move\" or use CSS on the draggable elements to change the cursor\nTo migrate use the dragActiveClass option and set this yourself with css\ndragCancel$: The dragStart $event.x and $event.y values were removed as these were always\n0\nthe drag helper provider is now no longer exported as part of the public api, just\nremove it from your code to migrate\nThe DragAndDropModule.forRoot method was removed. To migrate just import the\nDragAndDropModule module directly\nthe drag end event is now called after the drop event to mimic how html5 drag and\ndrop works\nA cloned element is now created when the element is being dragged, and the dragged\nelement is set to be positioned fixed. This may break some apps in some edge cases.\n\n\n3.0.1 (2018-06-05)\nBug Fixes\n\ndrag: style assignment for dragged element on IE (#33) (d0372ec), closes #29\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (d96c26e), closes #31\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nBug Fixes\n\nonly call drag start and end outputs when the element is actually dragged (45c6b5f), closes #21 #20\n\nFeatures\n\nupgrade to angular 5 (4159ce2)\nuse lettable rxjs operators (9fca12a)\nuse ng-packagr for building the package (57dd436)\ndragPointerDown: add a new output to repliate the old dragStart behaviour (4a58c61)\n\nBREAKING CHANGES\n\nThe UMD module path has changed from\nangular-draggable-droppable/dist/umd/angular-draggable-droppable.js to\nangular-draggable-droppable/bundles/angular-draggable-droppable.umd.js. System.js users will need\nto update their config.\nrxjs operators will now no longer be added to the observable prototype. Also rxjs\n= 5.5.x or higher is required\n\n\nAngular 5 or higher is now required to use this package\ndrag start and end events are now only called when the element is actually dragged,\nuse regular mousedown and mouseup events to get the old behaviour\n\n\n1.1.1 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (1265bee)\n\n\n1.1.0 (2017-09-22)\nFeatures\n\ndraggable: allow the draggable cursor to be customised (897b3fe)\n\n\n1.0.2 (2017-09-18)\nBug Fixes\n\ndraggable: fire dragEnd event when the event was not dragged (73d65d7), closes #17\n\n\n1.0.1 (2017-04-14)\nBug Fixes\n\ndraggable: prevent text from being highlighted in firefox (7d859c1)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (42631bc)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The upgrade should be seamless for most users\n\n\n0.6.0 (2017-03-23)\nFeatures\n\ndraggable: make dragging work on touch devices (dc0f863)\n\n\n0.5.4 (2017-03-04)\nPerformance Improvements\n\ndraggable: lazily create all mouse event listeners (3c99d40)\n\n\n0.5.3 (2017-03-04)\nBug Fixes\n\nmove dependencies to dev (17a2ccc)\n\n\n0.5.2 (2017-03-04)\nBug Fixes\n\nloosen peer dependency to allow angular 4 (bcc9080)\n\nPerformance Improvements\n\ndraggable: lazily create the mouse move listener (bebd925)\nrun all event listeners outside of angulars zone (d7c9256)\n\n\n0.5.1 (2017-01-06)\nBug Fixes\n\ndraggable: allow draggable events to be clicked (44ea67e)\n\n\n0.5.0 (2016-12-21)\nFeatures\n\ndragAndDropModule: add forRoot method (00f6989)\n\nBREAKING CHANGES\n\ndragAndDropModule: You must now import the DragAndDropModule with the forRoot method\n\n\n0.4.0 (2016-12-18)\nFeatures\n\ndraggable: remove the dragContainer option (5aca67d)\n\nBREAKING CHANGES\n\ndraggable: the dragContainer option has been removed as it didn't work in all cases and can be\n\nimplemented yourself with the validateDrag option\n\n0.3.1 (2016-12-18)\nBug Fixes\n\ndraggable: make the dragEnd output respect the validateDrag input (26cfa7e)\n\n\n0.3.0 (2016-12-12)\nFeatures\n\ndraggable: add dragContainer option (fb75711), closes #10\n\n\n0.2.3 (2016-12-11)\nBug Fixes\n\ndraggable: allow events to be dragged back into their original positions (7831903)\n\n\n0.2.2 (2016-12-11)\nBug Fixes\n\ndraggable: only emit the dragEnd event once (52e9a22)\n\n\n0.2.1 (2016-12-10)\nBug Fixes\n\nrevert duplicate dragging fix as it caused worse errors (7476301)\n\n\n0.2.0 (2016-12-10)\nBug Fixes\n\ncompletely remove applied styled after dragging (3445337)\ndraggable: dont fire duplicate dragging events with the same coordinates (222914b), closes #6\ndraggable: when dragging is disabled, no drag events should be emitted (729f24e)\ndroppable: only allow dropping of events when the cursor is inside (652d632), closes #5\n\nFeatures\n\ndraggable: auto change the cursor to the move icon on hover (50d1962), closes #9\nsnapGrid: rename to dragSnapGrid (a77d07a), closes #7\nvalidateDrag: add the validate drag input (9e5ac95), closes #8\n\nBREAKING CHANGES\n\ndroppable: the drag enter, leave and drop events will not fire until cursor is inside the droppable element. This is to mimic how native drag and drop works\nsnapGrid: The snapGrid input has been renamed to dragSnapGrid\n\n\n0.1.1 (2016-12-09)\nBug Fixes\n\ndraggable: disable pointer events on the element when dragging (f29b424)\n\n\n0.1.0 (2016-11-27)\nBug Fixes\n\ndraggable: dispose of observables when the component is destroyed (710c7f7)\nprevent the default move move interaction on dragging (d2fdcde)\n\nFeatures\n\ndragAxix: allow the drag axis to be locked to just x and y (38fd4b5), closes #2\ndraggable: add mwlDraggable directive (c6771eb)\ndroppable: add the mwlDroppable directive (6016f12), closes #1\nghostDragEnabled: add option to disable the ghost dragging effect (709327c), closes #3\nsnapGrid: implement draggable snap grids (16a3df8), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : >=6.0.0 \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isCoordinateWithinRectangle   (projects/.../droppable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/droppable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            isCoordinateWithinRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \nisCoordinateWithinRectangle(clientX: undefined, clientY: undefined, rect: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        rect\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular 6.0+ drag and drop\n\n\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-draggable-droppable/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nObservable powered drag and drop for angular 6.0+\nInstallation\nInstall through npm:\nnpm install --save angular-draggable-droppableThen use it in your app like so:\nimport { Component, NgModule } from '@angular/core';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\n\n@NgModule({\n  declarations: [DemoApp],\n  imports: [DragAndDropModule],\n  bootstrap: [DemoApp]\n})\nclass DemoModule {}\n\n@Component({\n  selector: 'demo-app',\n  template: `\n    Drag me!\n    \n      Drop here\n      Item dropped here with data: \"{{ droppedData }}\"!\n    \n  `\n})\nclass DemoApp {\n  droppedData: string;\n\n  dragEnd(event) {\n    console.log('Element was dragged', event);\n  }\n}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-draggable-droppable/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2018 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DragAndDropModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        \n                            1 module\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        2 directives\n                    \n                \n            \n            \n                \n                    \n                        \n                        9 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ValidateDrag   (projects/.../draggable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-draggable-droppable/src/lib/draggable.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        ValidateDrag\n                    \n                \n                \n                    \n                        ValidateDrag:     function\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
